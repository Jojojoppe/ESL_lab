
uart_echo.elf:     file format elf32-littlenios2
uart_echo.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000081b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000028fc memsz 0x000028fc flags r-x
    LOAD off    0x0000391c vaddr 0x0000a91c paddr 0x0000ac28 align 2**12
         filesz 0x0000030c memsz 0x0000030c flags rw-
    LOAD off    0x00003f34 vaddr 0x0000af34 paddr 0x0000af34 align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000026f0  000081b8  000081b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000074  0000a8a8  0000a8a8  000038a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000030c  0000a91c  0000ac28  0000391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  0000af34  0000af34  00003f34  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00003c28  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000610  00000000  00000000  00003c50  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00008c6e  00000000  00000000  00004260  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002d4a  00000000  00000000  0000cece  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003428  00000000  00000000  0000fc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000099c  00000000  00000000  00013040  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000017a3  00000000  00000000  000139dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001d99  00000000  00000000  0001517f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000020  00000000  00000000  00016f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000288  00000000  00000000  00016f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00018ce4  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  00018ce7  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00018cf3  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00018cf4  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00018cf5  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00018cf9  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00018cfd  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00018d01  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00018d0c  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00018d17  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000004  00000000  00000000  00018d22  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000021  00000000  00000000  00018d26  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003757e  00000000  00000000  00018d47  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
000081b8 l    d  .text	00000000 .text
0000a8a8 l    d  .rodata	00000000 .rodata
0000a91c l    d  .rwdata	00000000 .rwdata
0000af34 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../uart_echo_bsp//obj/HAL/src/crt0.o
000081f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00008094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000a91c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008c34 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 alt_load.c
00008d64 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
00008eb8 l     F .text	00000050 alt_get_errno
00008f08 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00009128 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_write.c
000092c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009404 l     F .text	00000038 alt_dev_reg
0000a9fc l     O .rwdata	0000002c jtag_uart_0
0000aa28 l     O .rwdata	0000002c uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009714 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000098d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000099e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
00009b0c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009c40 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009c6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000a2ac l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00008e50 g     F .text	00000068 alt_main
00008344 g     F .text	00000080 _puts_r
0000af50 g     O .bss	00000100 alt_irq
0000ac28 g       *ABS*	00000000 __flash_rwdata_start
000082f8 g     F .text	0000004c printf
00000000  w      *UND*	00000000 __errno
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000af34 g     O .bss	00000004 errno
0000af3c g     O .bss	00000004 alt_argv
00012bfc g       *ABS*	00000000 _gp
0000aa7c g     O .rwdata	00000180 alt_fd_list
00009d5c g     F .text	00000090 alt_find_dev
0000a36c g     F .text	00000078 alt_io_redirect
000083c4 g     F .text	00000014 puts
00009588 g     F .text	000000f4 altera_avalon_jtag_uart_read
000082bc g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008d54 g     F .text	00000008 __udivsi3
0000a5a0 g     F .text	0000008c alt_icache_flush
0000ac14 g     O .rwdata	00000004 alt_max_fd
0000abfc g     O .rwdata	00000004 _global_impure_ptr
0000b050 g       *ABS*	00000000 __bss_end
0000a1bc g     F .text	000000f0 alt_iic_isr_register
0000a47c g     F .text	00000104 alt_tick
0000a170 g     F .text	0000004c alt_ic_irq_enabled
0000a3e4 g     F .text	00000098 alt_alarm_stop
0000af44 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	000000cc alt_irq_handler
0000aa54 g     O .rwdata	00000028 alt_dev_null
00009c24 g     F .text	0000001c alt_dcache_flush_all
0000ac28 g       *ABS*	00000000 __ram_rwdata_end
0000ac0c g     O .rwdata	00000008 alt_dev_list
00009318 g     F .text	000000ec write
0000a91c g       *ABS*	00000000 __ram_rodata_end
00008d5c g     F .text	00000008 __umodsi3
0000b050 g       *ABS*	00000000 end
00009a30 g     F .text	000000dc altera_avalon_uart_write
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00009788 g     F .text	00000088 alt_avalon_timer_sc_init
00009870 g     F .text	00000060 altera_avalon_uart_write_fd
0000967c g     F .text	00000098 altera_avalon_jtag_uart_write
00008400 g     F .text	000006c4 ___vfprintf_internal_r
0000a694 g     F .text	000001d8 __call_exitprocs
000081b8 g     F .text	0000003c _start
0000af48 g     O .bss	00000004 _alt_tick_rate
0000af4c g     O .bss	00000004 _alt_nticks
00009178 g     F .text	000000f0 read
00009470 g     F .text	00000058 alt_sys_init
0000a91c g       *ABS*	00000000 __ram_rwdata_start
0000a8a8 g       *ABS*	00000000 __ram_rodata_start
000094c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00009f00 g     F .text	000000b4 alt_get_fd
0000a64c g     F .text	00000048 memcmp
0000b050 g       *ABS*	00000000 __alt_stack_base
00009dec g     F .text	00000114 alt_find_file
00009cbc g     F .text	000000a0 alt_dev_llist_insert
00008ae8 g     F .text	000000e0 __sfvwrite_small_dev
0000af34 g       *ABS*	00000000 __bss_start
000081f4 g     F .text	000000c8 main
0000af40 g     O .bss	00000004 alt_envp
00009528 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ac18 g     O .rwdata	00000004 alt_errno
00008ca8 g     F .text	00000050 __divsi3
0000a8a8 g       *ABS*	00000000 __flash_rodata_start
0000943c g     F .text	00000034 alt_irq_init
00009268 g     F .text	00000060 alt_release_fd
00008bc8 g     F .text	0000006c _write_r
0000ac00 g     O .rwdata	00000004 _impure_ptr
0000af38 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000ac04 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009fe4 g     F .text	00000050 alt_ic_isr_register
0000ac28 g       *ABS*	00000000 _edata
00009810 g     F .text	00000060 altera_avalon_uart_read_fd
0000b050 g       *ABS*	00000000 _end
000081b8 g       *ABS*	00000000 __ram_exceptions_end
0000a0d0 g     F .text	000000a0 alt_ic_irq_disable
0000a580 g     F .text	00000020 altera_nios2_qsys_irq_init
0000a62c g     F .text	00000020 exit
00008cf8 g     F .text	0000005c __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000a86c g     F .text	0000003c _exit
000083d8 g     F .text	00000028 strlen
00008fd4 g     F .text	00000154 open
00009fb4 g     F .text	00000030 alt_icache_flush_all
0000ac1c g     O .rwdata	00000004 alt_priority_mask
0000a034 g     F .text	0000009c alt_ic_irq_enable
00008ac4 g     F .text	00000024 __vfprintf_internal
00009920 g     F .text	000000c0 altera_avalon_uart_read
0000ac20 g     O .rwdata	00000008 alt_alarm_list
00009b5c g     F .text	000000c8 close
00008dd0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08606e14 	ori	at,at,33208
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)

00008094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	defff904 	addi	sp,sp,-28
    80f0:	dfc00615 	stw	ra,24(sp)
    80f4:	df000515 	stw	fp,20(sp)
    80f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    80fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8100:	0005313a 	rdctl	r2,ipending
    8104:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    810c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8114:	00800044 	movi	r2,1
    8118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	e0fffb17 	ldw	r3,-20(fp)
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	1884703a 	and	r2,r3,r2
    8128:	10001726 	beq	r2,zero,8188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    812c:	00c00074 	movhi	r3,1
    8130:	18ebd404 	addi	r3,r3,-20656
    8134:	e0bffd17 	ldw	r2,-12(fp)
    8138:	100490fa 	slli	r2,r2,3
    813c:	1885883a 	add	r2,r3,r2
    8140:	10c00017 	ldw	r3,0(r2)
    8144:	01000074 	movhi	r4,1
    8148:	212bd404 	addi	r4,r4,-20656
    814c:	e0bffd17 	ldw	r2,-12(fp)
    8150:	100490fa 	slli	r2,r2,3
    8154:	2085883a 	add	r2,r4,r2
    8158:	10800104 	addi	r2,r2,4
    815c:	10800017 	ldw	r2,0(r2)
    8160:	1009883a 	mov	r4,r2
    8164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    816c:	0005313a 	rdctl	r2,ipending
    8170:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
    8178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    817c:	e0bffb17 	ldw	r2,-20(fp)
    8180:	103fe31e 	bne	r2,zero,8110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    8184:	00000706 	br	81a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8188:	e0bffc17 	ldw	r2,-16(fp)
    818c:	1085883a 	add	r2,r2,r2
    8190:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8194:	e0bffd17 	ldw	r2,-12(fp)
    8198:	10800044 	addi	r2,r2,1
    819c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a0:	003fde06 	br	811c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    81a4:	e037883a 	mov	sp,fp
    81a8:	dfc00117 	ldw	ra,4(sp)
    81ac:	df000017 	ldw	fp,0(sp)
    81b0:	dec00204 	addi	sp,sp,8
    81b4:	f800283a 	ret

Disassembly of section .text:

000081b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    81b8:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    81bc:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    81c0:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    81c4:	d68aff14 	ori	gp,gp,11260
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    81c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    81cc:	10abcd14 	ori	r2,r2,44852

    movhi r3, %hi(__bss_end)
    81d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    81d4:	18ec1414 	ori	r3,r3,45136

    beq r2, r3, 1f
    81d8:	10c00326 	beq	r2,r3,81e8 <_start+0x30>

0:
    stw zero, (r2)
    81dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81e4:	10fffd36 	bltu	r2,r3,81dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81e8:	0008dd00 	call	8dd0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81ec:	0008e500 	call	8e50 <alt_main>

000081f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81f0:	003fff06 	br	81f0 <alt_after_alt_main>

000081f4 <main>:
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>


int main(){
    81f4:	deffbb04 	addi	sp,sp,-276
    81f8:	dfc04415 	stw	ra,272(sp)
    81fc:	df004315 	stw	fp,268(sp)
    8200:	df004304 	addi	fp,sp,268
	int i;
	printf("Hello world!\r\n");
    8204:	01000074 	movhi	r4,1
    8208:	212a2a04 	addi	r4,r4,-22360
    820c:	00083c40 	call	83c4 <puts>

	int f = open("/dev/uart_0", O_RDWR);
    8210:	01000074 	movhi	r4,1
    8214:	212a2e04 	addi	r4,r4,-22344
    8218:	01400084 	movi	r5,2
    821c:	0008fd40 	call	8fd4 <open>
    8220:	e0bfbe15 	stw	r2,-264(fp)
	printf("%d\r\n", f);
    8224:	01000074 	movhi	r4,1
    8228:	212a3104 	addi	r4,r4,-22332
    822c:	e17fbe17 	ldw	r5,-264(fp)
    8230:	00082f80 	call	82f8 <printf>
    8234:	00000106 	br	823c <main+0x48>
		if(rd>0){
			for(i=0; i<rd; i++){
				printf("%02x %c\r\n", s[i], s[i]);
			}
		}
	}
    8238:	0001883a 	nop
	printf("%d\r\n", f);

	unsigned char s[256];

	while(1){
		int rd = read(f, s, 256);
    823c:	e0bfc004 	addi	r2,fp,-256
    8240:	e13fbe17 	ldw	r4,-264(fp)
    8244:	100b883a 	mov	r5,r2
    8248:	01804004 	movi	r6,256
    824c:	00091780 	call	9178 <read>
    8250:	e0bfbf15 	stw	r2,-260(fp)
		if(rd>0){
    8254:	e0bfbf17 	ldw	r2,-260(fp)
    8258:	00bff70e 	bge	zero,r2,8238 <main+0x44>
			for(i=0; i<rd; i++){
    825c:	e03fbd15 	stw	zero,-268(fp)
    8260:	00001206 	br	82ac <main+0xb8>
				printf("%02x %c\r\n", s[i], s[i]);
    8264:	e0ffc004 	addi	r3,fp,-256
    8268:	e0bfbd17 	ldw	r2,-268(fp)
    826c:	1885883a 	add	r2,r3,r2
    8270:	10800003 	ldbu	r2,0(r2)
    8274:	10c03fcc 	andi	r3,r2,255
    8278:	e13fc004 	addi	r4,fp,-256
    827c:	e0bfbd17 	ldw	r2,-268(fp)
    8280:	2085883a 	add	r2,r4,r2
    8284:	10800003 	ldbu	r2,0(r2)
    8288:	10803fcc 	andi	r2,r2,255
    828c:	01000074 	movhi	r4,1
    8290:	212a3304 	addi	r4,r4,-22324
    8294:	180b883a 	mov	r5,r3
    8298:	100d883a 	mov	r6,r2
    829c:	00082f80 	call	82f8 <printf>
	unsigned char s[256];

	while(1){
		int rd = read(f, s, 256);
		if(rd>0){
			for(i=0; i<rd; i++){
    82a0:	e0bfbd17 	ldw	r2,-268(fp)
    82a4:	10800044 	addi	r2,r2,1
    82a8:	e0bfbd15 	stw	r2,-268(fp)
    82ac:	e0ffbd17 	ldw	r3,-268(fp)
    82b0:	e0bfbf17 	ldw	r2,-260(fp)
    82b4:	18bfeb16 	blt	r3,r2,8264 <main+0x70>
				printf("%02x %c\r\n", s[i], s[i]);
			}
		}
	}
    82b8:	003fdf06 	br	8238 <main+0x44>

000082bc <_printf_r>:
    82bc:	defffd04 	addi	sp,sp,-12
    82c0:	dfc00015 	stw	ra,0(sp)
    82c4:	d9800115 	stw	r6,4(sp)
    82c8:	d9c00215 	stw	r7,8(sp)
    82cc:	20800217 	ldw	r2,8(r4)
    82d0:	00c00074 	movhi	r3,1
    82d4:	18e2ba04 	addi	r3,r3,-29976
    82d8:	280d883a 	mov	r6,r5
    82dc:	10c00115 	stw	r3,4(r2)
    82e0:	100b883a 	mov	r5,r2
    82e4:	d9c00104 	addi	r7,sp,4
    82e8:	00084000 	call	8400 <___vfprintf_internal_r>
    82ec:	dfc00017 	ldw	ra,0(sp)
    82f0:	dec00304 	addi	sp,sp,12
    82f4:	f800283a 	ret

000082f8 <printf>:
    82f8:	defffc04 	addi	sp,sp,-16
    82fc:	dfc00015 	stw	ra,0(sp)
    8300:	d9400115 	stw	r5,4(sp)
    8304:	d9800215 	stw	r6,8(sp)
    8308:	d9c00315 	stw	r7,12(sp)
    830c:	00800074 	movhi	r2,1
    8310:	10ab0004 	addi	r2,r2,-21504
    8314:	10800017 	ldw	r2,0(r2)
    8318:	00c00074 	movhi	r3,1
    831c:	18e2ba04 	addi	r3,r3,-29976
    8320:	200b883a 	mov	r5,r4
    8324:	10800217 	ldw	r2,8(r2)
    8328:	d9800104 	addi	r6,sp,4
    832c:	10c00115 	stw	r3,4(r2)
    8330:	1009883a 	mov	r4,r2
    8334:	0008ac40 	call	8ac4 <__vfprintf_internal>
    8338:	dfc00017 	ldw	ra,0(sp)
    833c:	dec00404 	addi	sp,sp,16
    8340:	f800283a 	ret

00008344 <_puts_r>:
    8344:	defffd04 	addi	sp,sp,-12
    8348:	dc000015 	stw	r16,0(sp)
    834c:	2021883a 	mov	r16,r4
    8350:	2809883a 	mov	r4,r5
    8354:	dfc00215 	stw	ra,8(sp)
    8358:	dc400115 	stw	r17,4(sp)
    835c:	2823883a 	mov	r17,r5
    8360:	00083d80 	call	83d8 <strlen>
    8364:	81400217 	ldw	r5,8(r16)
    8368:	00c00074 	movhi	r3,1
    836c:	18e2ba04 	addi	r3,r3,-29976
    8370:	880d883a 	mov	r6,r17
    8374:	8009883a 	mov	r4,r16
    8378:	28c00115 	stw	r3,4(r5)
    837c:	100f883a 	mov	r7,r2
    8380:	183ee83a 	callr	r3
    8384:	047fffc4 	movi	r17,-1
    8388:	14400926 	beq	r2,r17,83b0 <_puts_r+0x6c>
    838c:	81400217 	ldw	r5,8(r16)
    8390:	8009883a 	mov	r4,r16
    8394:	01800074 	movhi	r6,1
    8398:	31aa3604 	addi	r6,r6,-22312
    839c:	28800117 	ldw	r2,4(r5)
    83a0:	01c00044 	movi	r7,1
    83a4:	103ee83a 	callr	r2
    83a8:	14400126 	beq	r2,r17,83b0 <_puts_r+0x6c>
    83ac:	0005883a 	mov	r2,zero
    83b0:	dfc00217 	ldw	ra,8(sp)
    83b4:	dc400117 	ldw	r17,4(sp)
    83b8:	dc000017 	ldw	r16,0(sp)
    83bc:	dec00304 	addi	sp,sp,12
    83c0:	f800283a 	ret

000083c4 <puts>:
    83c4:	00800074 	movhi	r2,1
    83c8:	10ab0004 	addi	r2,r2,-21504
    83cc:	200b883a 	mov	r5,r4
    83d0:	11000017 	ldw	r4,0(r2)
    83d4:	00083441 	jmpi	8344 <_puts_r>

000083d8 <strlen>:
    83d8:	20800007 	ldb	r2,0(r4)
    83dc:	10000626 	beq	r2,zero,83f8 <strlen+0x20>
    83e0:	2005883a 	mov	r2,r4
    83e4:	10800044 	addi	r2,r2,1
    83e8:	10c00007 	ldb	r3,0(r2)
    83ec:	183ffd1e 	bne	r3,zero,83e4 <strlen+0xc>
    83f0:	1105c83a 	sub	r2,r2,r4
    83f4:	f800283a 	ret
    83f8:	0005883a 	mov	r2,zero
    83fc:	f800283a 	ret

00008400 <___vfprintf_internal_r>:
    8400:	deffe204 	addi	sp,sp,-120
    8404:	d8c00804 	addi	r3,sp,32
    8408:	df001c15 	stw	fp,112(sp)
    840c:	ddc01b15 	stw	r23,108(sp)
    8410:	dd401915 	stw	r21,100(sp)
    8414:	dd001815 	stw	r20,96(sp)
    8418:	dcc01715 	stw	r19,92(sp)
    841c:	dc801615 	stw	r18,88(sp)
    8420:	dc001415 	stw	r16,80(sp)
    8424:	dfc01d15 	stw	ra,116(sp)
    8428:	dd801a15 	stw	r22,104(sp)
    842c:	dc401515 	stw	r17,84(sp)
    8430:	2039883a 	mov	fp,r4
    8434:	d9c00e15 	stw	r7,56(sp)
    8438:	3021883a 	mov	r16,r6
    843c:	0025883a 	mov	r18,zero
    8440:	d8001315 	stw	zero,76(sp)
    8444:	d8000d15 	stw	zero,52(sp)
    8448:	0029883a 	mov	r20,zero
    844c:	d8000b15 	stw	zero,44(sp)
    8450:	d8000c15 	stw	zero,48(sp)
    8454:	d8001115 	stw	zero,68(sp)
    8458:	d8001015 	stw	zero,64(sp)
    845c:	002b883a 	mov	r21,zero
    8460:	04c00044 	movi	r19,1
    8464:	d8c00a15 	stw	r3,40(sp)
    8468:	282f883a 	mov	r23,r5
    846c:	80c00003 	ldbu	r3,0(r16)
    8470:	84000044 	addi	r16,r16,1
    8474:	18803fcc 	andi	r2,r3,255
    8478:	1080201c 	xori	r2,r2,128
    847c:	10bfe004 	addi	r2,r2,-128
    8480:	10001426 	beq	r2,zero,84d4 <___vfprintf_internal_r+0xd4>
    8484:	acc02f26 	beq	r21,r19,8544 <___vfprintf_internal_r+0x144>
    8488:	9d401f16 	blt	r19,r21,8508 <___vfprintf_internal_r+0x108>
    848c:	a83ff71e 	bne	r21,zero,846c <___vfprintf_internal_r+0x6c>
    8490:	01000944 	movi	r4,37
    8494:	1100d526 	beq	r2,r4,87ec <___vfprintf_internal_r+0x3ec>
    8498:	b8800117 	ldw	r2,4(r23)
    849c:	d8c00905 	stb	r3,36(sp)
    84a0:	e009883a 	mov	r4,fp
    84a4:	b80b883a 	mov	r5,r23
    84a8:	d9800904 	addi	r6,sp,36
    84ac:	01c00044 	movi	r7,1
    84b0:	103ee83a 	callr	r2
    84b4:	10009c1e 	bne	r2,zero,8728 <___vfprintf_internal_r+0x328>
    84b8:	80c00003 	ldbu	r3,0(r16)
    84bc:	94800044 	addi	r18,r18,1
    84c0:	84000044 	addi	r16,r16,1
    84c4:	18803fcc 	andi	r2,r3,255
    84c8:	1080201c 	xori	r2,r2,128
    84cc:	10bfe004 	addi	r2,r2,-128
    84d0:	103fec1e 	bne	r2,zero,8484 <___vfprintf_internal_r+0x84>
    84d4:	9005883a 	mov	r2,r18
    84d8:	dfc01d17 	ldw	ra,116(sp)
    84dc:	df001c17 	ldw	fp,112(sp)
    84e0:	ddc01b17 	ldw	r23,108(sp)
    84e4:	dd801a17 	ldw	r22,104(sp)
    84e8:	dd401917 	ldw	r21,100(sp)
    84ec:	dd001817 	ldw	r20,96(sp)
    84f0:	dcc01717 	ldw	r19,92(sp)
    84f4:	dc801617 	ldw	r18,88(sp)
    84f8:	dc401517 	ldw	r17,84(sp)
    84fc:	dc001417 	ldw	r16,80(sp)
    8500:	dec01e04 	addi	sp,sp,120
    8504:	f800283a 	ret
    8508:	01000084 	movi	r4,2
    850c:	a9001126 	beq	r21,r4,8554 <___vfprintf_internal_r+0x154>
    8510:	010000c4 	movi	r4,3
    8514:	a93fd51e 	bne	r21,r4,846c <___vfprintf_internal_r+0x6c>
    8518:	193ff404 	addi	r4,r3,-48
    851c:	21003fcc 	andi	r4,r4,255
    8520:	01400244 	movi	r5,9
    8524:	29001936 	bltu	r5,r4,858c <___vfprintf_internal_r+0x18c>
    8528:	d8c00b17 	ldw	r3,44(sp)
    852c:	00bfffc4 	movi	r2,-1
    8530:	1880e126 	beq	r3,r2,88b8 <___vfprintf_internal_r+0x4b8>
    8534:	188002a4 	muli	r2,r3,10
    8538:	2089883a 	add	r4,r4,r2
    853c:	d9000b15 	stw	r4,44(sp)
    8540:	003fca06 	br	846c <___vfprintf_internal_r+0x6c>
    8544:	01000c04 	movi	r4,48
    8548:	1100d626 	beq	r2,r4,88a4 <___vfprintf_internal_r+0x4a4>
    854c:	01000944 	movi	r4,37
    8550:	1100f026 	beq	r2,r4,8914 <___vfprintf_internal_r+0x514>
    8554:	193ff404 	addi	r4,r3,-48
    8558:	21003fcc 	andi	r4,r4,255
    855c:	01400244 	movi	r5,9
    8560:	29000836 	bltu	r5,r4,8584 <___vfprintf_internal_r+0x184>
    8564:	d8c00c17 	ldw	r3,48(sp)
    8568:	00bfffc4 	movi	r2,-1
    856c:	1880d026 	beq	r3,r2,88b0 <___vfprintf_internal_r+0x4b0>
    8570:	188002a4 	muli	r2,r3,10
    8574:	2089883a 	add	r4,r4,r2
    8578:	d9000c15 	stw	r4,48(sp)
    857c:	05400084 	movi	r21,2
    8580:	003fba06 	br	846c <___vfprintf_internal_r+0x6c>
    8584:	01000b84 	movi	r4,46
    8588:	1100a526 	beq	r2,r4,8820 <___vfprintf_internal_r+0x420>
    858c:	01001b04 	movi	r4,108
    8590:	1100a126 	beq	r2,r4,8818 <___vfprintf_internal_r+0x418>
    8594:	d9400b17 	ldw	r5,44(sp)
    8598:	00bfffc4 	movi	r2,-1
    859c:	2880da26 	beq	r5,r2,8908 <___vfprintf_internal_r+0x508>
    85a0:	d8001015 	stw	zero,64(sp)
    85a4:	18ffea04 	addi	r3,r3,-88
    85a8:	18c03fcc 	andi	r3,r3,255
    85ac:	00800804 	movi	r2,32
    85b0:	10c0022e 	bgeu	r2,r3,85bc <___vfprintf_internal_r+0x1bc>
    85b4:	002b883a 	mov	r21,zero
    85b8:	003fac06 	br	846c <___vfprintf_internal_r+0x6c>
    85bc:	18c7883a 	add	r3,r3,r3
    85c0:	18c7883a 	add	r3,r3,r3
    85c4:	01000074 	movhi	r4,1
    85c8:	21217604 	addi	r4,r4,-31272
    85cc:	1907883a 	add	r3,r3,r4
    85d0:	18800017 	ldw	r2,0(r3)
    85d4:	1000683a 	jmp	r2
    85d8:	00008940 	call	894 <__alt_mem_onchip_memory2_0-0x776c>
    85dc:	000085b4 	movhi	zero,534
    85e0:	000085b4 	movhi	zero,534
    85e4:	000085b4 	movhi	zero,534
    85e8:	000085b4 	movhi	zero,534
    85ec:	000085b4 	movhi	zero,534
    85f0:	000085b4 	movhi	zero,534
    85f4:	000085b4 	movhi	zero,534
    85f8:	000085b4 	movhi	zero,534
    85fc:	000085b4 	movhi	zero,534
    8600:	000085b4 	movhi	zero,534
    8604:	00008950 	cmplti	zero,zero,549
    8608:	0000865c 	xori	zero,zero,537
    860c:	000085b4 	movhi	zero,534
    8610:	000085b4 	movhi	zero,534
    8614:	000085b4 	movhi	zero,534
    8618:	000085b4 	movhi	zero,534
    861c:	0000865c 	xori	zero,zero,537
    8620:	000085b4 	movhi	zero,534
    8624:	000085b4 	movhi	zero,534
    8628:	000085b4 	movhi	zero,534
    862c:	000085b4 	movhi	zero,534
    8630:	000085b4 	movhi	zero,534
    8634:	00008730 	cmpltui	zero,zero,540
    8638:	000085b4 	movhi	zero,534
    863c:	000085b4 	movhi	zero,534
    8640:	000085b4 	movhi	zero,534
    8644:	00008998 	cmpnei	zero,zero,550
    8648:	000085b4 	movhi	zero,534
    864c:	00008734 	movhi	zero,540
    8650:	000085b4 	movhi	zero,534
    8654:	000085b4 	movhi	zero,534
    8658:	00008948 	cmpgei	zero,zero,549
    865c:	d8c00d17 	ldw	r3,52(sp)
    8660:	18003426 	beq	r3,zero,8734 <___vfprintf_internal_r+0x334>
    8664:	d9000e17 	ldw	r4,56(sp)
    8668:	00c00044 	movi	r3,1
    866c:	25800017 	ldw	r22,0(r4)
    8670:	21000104 	addi	r4,r4,4
    8674:	d9000e15 	stw	r4,56(sp)
    8678:	d8c00d15 	stw	r3,52(sp)
    867c:	b0010b16 	blt	r22,zero,8aac <___vfprintf_internal_r+0x6ac>
    8680:	d8001215 	stw	zero,72(sp)
    8684:	d82b883a 	mov	r21,sp
    8688:	b000321e 	bne	r22,zero,8754 <___vfprintf_internal_r+0x354>
    868c:	d8c00b17 	ldw	r3,44(sp)
    8690:	d809883a 	mov	r4,sp
    8694:	00c00b0e 	bge	zero,r3,86c4 <___vfprintf_internal_r+0x2c4>
    8698:	d8800b17 	ldw	r2,44(sp)
    869c:	d82b883a 	mov	r21,sp
    86a0:	00c00c04 	movi	r3,48
    86a4:	00000206 	br	86b0 <___vfprintf_internal_r+0x2b0>
    86a8:	d9400a17 	ldw	r5,40(sp)
    86ac:	a9400426 	beq	r21,r5,86c0 <___vfprintf_internal_r+0x2c0>
    86b0:	a8c00005 	stb	r3,0(r21)
    86b4:	10bfffc4 	addi	r2,r2,-1
    86b8:	ad400044 	addi	r21,r21,1
    86bc:	103ffa1e 	bne	r2,zero,86a8 <___vfprintf_internal_r+0x2a8>
    86c0:	a92dc83a 	sub	r22,r21,r4
    86c4:	d8c01217 	ldw	r3,72(sp)
    86c8:	b0c5883a 	add	r2,r22,r3
    86cc:	d8c00c17 	ldw	r3,48(sp)
    86d0:	1885c83a 	sub	r2,r3,r2
    86d4:	d8c01017 	ldw	r3,64(sp)
    86d8:	d8800f15 	stw	r2,60(sp)
    86dc:	18007826 	beq	r3,zero,88c0 <___vfprintf_internal_r+0x4c0>
    86e0:	d8c01217 	ldw	r3,72(sp)
    86e4:	1800e41e 	bne	r3,zero,8a78 <___vfprintf_internal_r+0x678>
    86e8:	d8c00f17 	ldw	r3,60(sp)
    86ec:	00c05c0e 	bge	zero,r3,8860 <___vfprintf_internal_r+0x460>
    86f0:	00800c04 	movi	r2,48
    86f4:	d88008c5 	stb	r2,35(sp)
    86f8:	1c7fffc4 	addi	r17,r3,-1
    86fc:	00000306 	br	870c <___vfprintf_internal_r+0x30c>
    8700:	8c7fffc4 	addi	r17,r17,-1
    8704:	013fffc4 	movi	r4,-1
    8708:	8900eb26 	beq	r17,r4,8ab8 <___vfprintf_internal_r+0x6b8>
    870c:	b8800117 	ldw	r2,4(r23)
    8710:	e009883a 	mov	r4,fp
    8714:	b80b883a 	mov	r5,r23
    8718:	d98008c4 	addi	r6,sp,35
    871c:	01c00044 	movi	r7,1
    8720:	103ee83a 	callr	r2
    8724:	103ff626 	beq	r2,zero,8700 <___vfprintf_internal_r+0x300>
    8728:	04bfffc4 	movi	r18,-1
    872c:	003f6906 	br	84d4 <___vfprintf_internal_r+0xd4>
    8730:	05000204 	movi	r20,8
    8734:	d9400e17 	ldw	r5,56(sp)
    8738:	2d800017 	ldw	r22,0(r5)
    873c:	29400104 	addi	r5,r5,4
    8740:	d9400e15 	stw	r5,56(sp)
    8744:	d8000d15 	stw	zero,52(sp)
    8748:	d8001215 	stw	zero,72(sp)
    874c:	d82b883a 	mov	r21,sp
    8750:	b03fce26 	beq	r22,zero,868c <___vfprintf_internal_r+0x28c>
    8754:	9005883a 	mov	r2,r18
    8758:	dc000f15 	stw	r16,60(sp)
    875c:	a025883a 	mov	r18,r20
    8760:	04400244 	movi	r17,9
    8764:	dc001317 	ldw	r16,76(sp)
    8768:	1029883a 	mov	r20,r2
    876c:	00000506 	br	8784 <___vfprintf_internal_r+0x384>
    8770:	b5800c04 	addi	r22,r22,48
    8774:	ad800005 	stb	r22,0(r21)
    8778:	102d883a 	mov	r22,r2
    877c:	ad400044 	addi	r21,r21,1
    8780:	10000c26 	beq	r2,zero,87b4 <___vfprintf_internal_r+0x3b4>
    8784:	b009883a 	mov	r4,r22
    8788:	900b883a 	mov	r5,r18
    878c:	0008d540 	call	8d54 <__udivsi3>
    8790:	9089383a 	mul	r4,r18,r2
    8794:	b12dc83a 	sub	r22,r22,r4
    8798:	8dbff50e 	bge	r17,r22,8770 <___vfprintf_internal_r+0x370>
    879c:	80001126 	beq	r16,zero,87e4 <___vfprintf_internal_r+0x3e4>
    87a0:	b5800dc4 	addi	r22,r22,55
    87a4:	ad800005 	stb	r22,0(r21)
    87a8:	102d883a 	mov	r22,r2
    87ac:	ad400044 	addi	r21,r21,1
    87b0:	103ff41e 	bne	r2,zero,8784 <___vfprintf_internal_r+0x384>
    87b4:	d8c00b17 	ldw	r3,44(sp)
    87b8:	a005883a 	mov	r2,r20
    87bc:	aeedc83a 	sub	r22,r21,sp
    87c0:	9029883a 	mov	r20,r18
    87c4:	1025883a 	mov	r18,r2
    87c8:	1d85c83a 	sub	r2,r3,r22
    87cc:	dc000f17 	ldw	r16,60(sp)
    87d0:	d809883a 	mov	r4,sp
    87d4:	00bfbb0e 	bge	zero,r2,86c4 <___vfprintf_internal_r+0x2c4>
    87d8:	d8c00a17 	ldw	r3,40(sp)
    87dc:	a8ffb036 	bltu	r21,r3,86a0 <___vfprintf_internal_r+0x2a0>
    87e0:	003fb806 	br	86c4 <___vfprintf_internal_r+0x2c4>
    87e4:	b58015c4 	addi	r22,r22,87
    87e8:	003fe206 	br	8774 <___vfprintf_internal_r+0x374>
    87ec:	00c00044 	movi	r3,1
    87f0:	d8c00d15 	stw	r3,52(sp)
    87f4:	00ffffc4 	movi	r3,-1
    87f8:	d8c00b15 	stw	r3,44(sp)
    87fc:	d8001315 	stw	zero,76(sp)
    8800:	05000284 	movi	r20,10
    8804:	d8c00c15 	stw	r3,48(sp)
    8808:	d8001115 	stw	zero,68(sp)
    880c:	d8001015 	stw	zero,64(sp)
    8810:	dd400d17 	ldw	r21,52(sp)
    8814:	003f1506 	br	846c <___vfprintf_internal_r+0x6c>
    8818:	00c00044 	movi	r3,1
    881c:	d8c01115 	stw	r3,68(sp)
    8820:	054000c4 	movi	r21,3
    8824:	003f1106 	br	846c <___vfprintf_internal_r+0x6c>
    8828:	d8c00f17 	ldw	r3,60(sp)
    882c:	90e5883a 	add	r18,r18,r3
    8830:	d8c01217 	ldw	r3,72(sp)
    8834:	18000a26 	beq	r3,zero,8860 <___vfprintf_internal_r+0x460>
    8838:	b8800117 	ldw	r2,4(r23)
    883c:	00c00b44 	movi	r3,45
    8840:	d8c00905 	stb	r3,36(sp)
    8844:	e009883a 	mov	r4,fp
    8848:	b80b883a 	mov	r5,r23
    884c:	d9800904 	addi	r6,sp,36
    8850:	01c00044 	movi	r7,1
    8854:	103ee83a 	callr	r2
    8858:	103fb31e 	bne	r2,zero,8728 <___vfprintf_internal_r+0x328>
    885c:	94800044 	addi	r18,r18,1
    8860:	ada3c83a 	sub	r17,r21,r22
    8864:	05800316 	blt	zero,r22,8874 <___vfprintf_internal_r+0x474>
    8868:	003f5206 	br	85b4 <___vfprintf_internal_r+0x1b4>
    886c:	94800044 	addi	r18,r18,1
    8870:	ac7f5026 	beq	r21,r17,85b4 <___vfprintf_internal_r+0x1b4>
    8874:	ad7fffc4 	addi	r21,r21,-1
    8878:	a8c00003 	ldbu	r3,0(r21)
    887c:	b8800117 	ldw	r2,4(r23)
    8880:	e009883a 	mov	r4,fp
    8884:	d8c00905 	stb	r3,36(sp)
    8888:	b80b883a 	mov	r5,r23
    888c:	d9800904 	addi	r6,sp,36
    8890:	01c00044 	movi	r7,1
    8894:	103ee83a 	callr	r2
    8898:	103ff426 	beq	r2,zero,886c <___vfprintf_internal_r+0x46c>
    889c:	04bfffc4 	movi	r18,-1
    88a0:	003f0c06 	br	84d4 <___vfprintf_internal_r+0xd4>
    88a4:	dd401015 	stw	r21,64(sp)
    88a8:	05400084 	movi	r21,2
    88ac:	003eef06 	br	846c <___vfprintf_internal_r+0x6c>
    88b0:	0005883a 	mov	r2,zero
    88b4:	003f2f06 	br	8574 <___vfprintf_internal_r+0x174>
    88b8:	0005883a 	mov	r2,zero
    88bc:	003f1e06 	br	8538 <___vfprintf_internal_r+0x138>
    88c0:	d8c00f17 	ldw	r3,60(sp)
    88c4:	00ffda0e 	bge	zero,r3,8830 <___vfprintf_internal_r+0x430>
    88c8:	00800804 	movi	r2,32
    88cc:	d8800885 	stb	r2,34(sp)
    88d0:	1c7fffc4 	addi	r17,r3,-1
    88d4:	00000306 	br	88e4 <___vfprintf_internal_r+0x4e4>
    88d8:	8c7fffc4 	addi	r17,r17,-1
    88dc:	013fffc4 	movi	r4,-1
    88e0:	893fd126 	beq	r17,r4,8828 <___vfprintf_internal_r+0x428>
    88e4:	b8800117 	ldw	r2,4(r23)
    88e8:	e009883a 	mov	r4,fp
    88ec:	b80b883a 	mov	r5,r23
    88f0:	d9800884 	addi	r6,sp,34
    88f4:	01c00044 	movi	r7,1
    88f8:	103ee83a 	callr	r2
    88fc:	103ff626 	beq	r2,zero,88d8 <___vfprintf_internal_r+0x4d8>
    8900:	04bfffc4 	movi	r18,-1
    8904:	003ef306 	br	84d4 <___vfprintf_internal_r+0xd4>
    8908:	00800044 	movi	r2,1
    890c:	d8800b15 	stw	r2,44(sp)
    8910:	003f2406 	br	85a4 <___vfprintf_internal_r+0x1a4>
    8914:	b8c00117 	ldw	r3,4(r23)
    8918:	d8800905 	stb	r2,36(sp)
    891c:	e009883a 	mov	r4,fp
    8920:	b80b883a 	mov	r5,r23
    8924:	d9800904 	addi	r6,sp,36
    8928:	a80f883a 	mov	r7,r21
    892c:	183ee83a 	callr	r3
    8930:	103f7d1e 	bne	r2,zero,8728 <___vfprintf_internal_r+0x328>
    8934:	94800044 	addi	r18,r18,1
    8938:	002b883a 	mov	r21,zero
    893c:	003ecb06 	br	846c <___vfprintf_internal_r+0x6c>
    8940:	00c00044 	movi	r3,1
    8944:	d8c01315 	stw	r3,76(sp)
    8948:	05000404 	movi	r20,16
    894c:	003f7906 	br	8734 <___vfprintf_internal_r+0x334>
    8950:	d8c00c17 	ldw	r3,48(sp)
    8954:	98c0380e 	bge	r19,r3,8a38 <___vfprintf_internal_r+0x638>
    8958:	1dbfffc4 	addi	r22,r3,-1
    895c:	00800804 	movi	r2,32
    8960:	d8800845 	stb	r2,33(sp)
    8964:	b023883a 	mov	r17,r22
    8968:	057fffc4 	movi	r21,-1
    896c:	8c7fffc4 	addi	r17,r17,-1
    8970:	8d403026 	beq	r17,r21,8a34 <___vfprintf_internal_r+0x634>
    8974:	b8800117 	ldw	r2,4(r23)
    8978:	e009883a 	mov	r4,fp
    897c:	b80b883a 	mov	r5,r23
    8980:	d9800844 	addi	r6,sp,33
    8984:	01c00044 	movi	r7,1
    8988:	103ee83a 	callr	r2
    898c:	103ff726 	beq	r2,zero,896c <___vfprintf_internal_r+0x56c>
    8990:	04bfffc4 	movi	r18,-1
    8994:	003ecf06 	br	84d4 <___vfprintf_internal_r+0xd4>
    8998:	d9000e17 	ldw	r4,56(sp)
    899c:	d8c00e17 	ldw	r3,56(sp)
    89a0:	21000017 	ldw	r4,0(r4)
    89a4:	18c00104 	addi	r3,r3,4
    89a8:	d8c00e15 	stw	r3,56(sp)
    89ac:	d9000f15 	stw	r4,60(sp)
    89b0:	00083d80 	call	83d8 <strlen>
    89b4:	d8c00c17 	ldw	r3,48(sp)
    89b8:	102d883a 	mov	r22,r2
    89bc:	1887c83a 	sub	r3,r3,r2
    89c0:	d8c01215 	stw	r3,72(sp)
    89c4:	00c0110e 	bge	zero,r3,8a0c <___vfprintf_internal_r+0x60c>
    89c8:	00800804 	movi	r2,32
    89cc:	d8800805 	stb	r2,32(sp)
    89d0:	1c7fffc4 	addi	r17,r3,-1
    89d4:	057fffc4 	movi	r21,-1
    89d8:	00000206 	br	89e4 <___vfprintf_internal_r+0x5e4>
    89dc:	8c7fffc4 	addi	r17,r17,-1
    89e0:	8d400826 	beq	r17,r21,8a04 <___vfprintf_internal_r+0x604>
    89e4:	b8800117 	ldw	r2,4(r23)
    89e8:	e009883a 	mov	r4,fp
    89ec:	b80b883a 	mov	r5,r23
    89f0:	d9800804 	addi	r6,sp,32
    89f4:	01c00044 	movi	r7,1
    89f8:	103ee83a 	callr	r2
    89fc:	103ff726 	beq	r2,zero,89dc <___vfprintf_internal_r+0x5dc>
    8a00:	003f4906 	br	8728 <___vfprintf_internal_r+0x328>
    8a04:	d8c01217 	ldw	r3,72(sp)
    8a08:	90e5883a 	add	r18,r18,r3
    8a0c:	b8800117 	ldw	r2,4(r23)
    8a10:	d9800f17 	ldw	r6,60(sp)
    8a14:	e009883a 	mov	r4,fp
    8a18:	b80b883a 	mov	r5,r23
    8a1c:	b00f883a 	mov	r7,r22
    8a20:	103ee83a 	callr	r2
    8a24:	103f401e 	bne	r2,zero,8728 <___vfprintf_internal_r+0x328>
    8a28:	95a5883a 	add	r18,r18,r22
    8a2c:	002b883a 	mov	r21,zero
    8a30:	003e8e06 	br	846c <___vfprintf_internal_r+0x6c>
    8a34:	95a5883a 	add	r18,r18,r22
    8a38:	d9000e17 	ldw	r4,56(sp)
    8a3c:	b8800117 	ldw	r2,4(r23)
    8a40:	b80b883a 	mov	r5,r23
    8a44:	20c00017 	ldw	r3,0(r4)
    8a48:	d9800904 	addi	r6,sp,36
    8a4c:	e009883a 	mov	r4,fp
    8a50:	d8c00905 	stb	r3,36(sp)
    8a54:	d8c00e17 	ldw	r3,56(sp)
    8a58:	01c00044 	movi	r7,1
    8a5c:	1c400104 	addi	r17,r3,4
    8a60:	103ee83a 	callr	r2
    8a64:	103f301e 	bne	r2,zero,8728 <___vfprintf_internal_r+0x328>
    8a68:	94800044 	addi	r18,r18,1
    8a6c:	dc400e15 	stw	r17,56(sp)
    8a70:	002b883a 	mov	r21,zero
    8a74:	003e7d06 	br	846c <___vfprintf_internal_r+0x6c>
    8a78:	b8800117 	ldw	r2,4(r23)
    8a7c:	00c00b44 	movi	r3,45
    8a80:	d8c00905 	stb	r3,36(sp)
    8a84:	e009883a 	mov	r4,fp
    8a88:	b80b883a 	mov	r5,r23
    8a8c:	d9800904 	addi	r6,sp,36
    8a90:	01c00044 	movi	r7,1
    8a94:	103ee83a 	callr	r2
    8a98:	103f231e 	bne	r2,zero,8728 <___vfprintf_internal_r+0x328>
    8a9c:	d8c00f17 	ldw	r3,60(sp)
    8aa0:	94800044 	addi	r18,r18,1
    8aa4:	00ff1216 	blt	zero,r3,86f0 <___vfprintf_internal_r+0x2f0>
    8aa8:	003f6d06 	br	8860 <___vfprintf_internal_r+0x460>
    8aac:	05adc83a 	sub	r22,zero,r22
    8ab0:	d8c01215 	stw	r3,72(sp)
    8ab4:	003f2506 	br	874c <___vfprintf_internal_r+0x34c>
    8ab8:	d8c00f17 	ldw	r3,60(sp)
    8abc:	90e5883a 	add	r18,r18,r3
    8ac0:	003f6706 	br	8860 <___vfprintf_internal_r+0x460>

00008ac4 <__vfprintf_internal>:
    8ac4:	00800074 	movhi	r2,1
    8ac8:	10ab0004 	addi	r2,r2,-21504
    8acc:	2007883a 	mov	r3,r4
    8ad0:	11000017 	ldw	r4,0(r2)
    8ad4:	2805883a 	mov	r2,r5
    8ad8:	300f883a 	mov	r7,r6
    8adc:	180b883a 	mov	r5,r3
    8ae0:	100d883a 	mov	r6,r2
    8ae4:	00084001 	jmpi	8400 <___vfprintf_internal_r>

00008ae8 <__sfvwrite_small_dev>:
    8ae8:	2880000b 	ldhu	r2,0(r5)
    8aec:	defffa04 	addi	sp,sp,-24
    8af0:	dcc00315 	stw	r19,12(sp)
    8af4:	10c0020c 	andi	r3,r2,8
    8af8:	18ffffcc 	andi	r3,r3,65535
    8afc:	18e0001c 	xori	r3,r3,32768
    8b00:	dc800215 	stw	r18,8(sp)
    8b04:	dc400115 	stw	r17,4(sp)
    8b08:	dfc00515 	stw	ra,20(sp)
    8b0c:	dd000415 	stw	r20,16(sp)
    8b10:	dc000015 	stw	r16,0(sp)
    8b14:	18e00004 	addi	r3,r3,-32768
    8b18:	2825883a 	mov	r18,r5
    8b1c:	2027883a 	mov	r19,r4
    8b20:	3023883a 	mov	r17,r6
    8b24:	18002626 	beq	r3,zero,8bc0 <__sfvwrite_small_dev+0xd8>
    8b28:	2940008f 	ldh	r5,2(r5)
    8b2c:	28001016 	blt	r5,zero,8b70 <__sfvwrite_small_dev+0x88>
    8b30:	01c01a0e 	bge	zero,r7,8b9c <__sfvwrite_small_dev+0xb4>
    8b34:	3821883a 	mov	r16,r7
    8b38:	05010004 	movi	r20,1024
    8b3c:	00000306 	br	8b4c <__sfvwrite_small_dev+0x64>
    8b40:	88a3883a 	add	r17,r17,r2
    8b44:	0400150e 	bge	zero,r16,8b9c <__sfvwrite_small_dev+0xb4>
    8b48:	9140008f 	ldh	r5,2(r18)
    8b4c:	880d883a 	mov	r6,r17
    8b50:	9809883a 	mov	r4,r19
    8b54:	800f883a 	mov	r7,r16
    8b58:	a400010e 	bge	r20,r16,8b60 <__sfvwrite_small_dev+0x78>
    8b5c:	01c10004 	movi	r7,1024
    8b60:	0008bc80 	call	8bc8 <_write_r>
    8b64:	80a1c83a 	sub	r16,r16,r2
    8b68:	00bff516 	blt	zero,r2,8b40 <__sfvwrite_small_dev+0x58>
    8b6c:	9080000b 	ldhu	r2,0(r18)
    8b70:	10801014 	ori	r2,r2,64
    8b74:	9080000d 	sth	r2,0(r18)
    8b78:	00bfffc4 	movi	r2,-1
    8b7c:	dfc00517 	ldw	ra,20(sp)
    8b80:	dd000417 	ldw	r20,16(sp)
    8b84:	dcc00317 	ldw	r19,12(sp)
    8b88:	dc800217 	ldw	r18,8(sp)
    8b8c:	dc400117 	ldw	r17,4(sp)
    8b90:	dc000017 	ldw	r16,0(sp)
    8b94:	dec00604 	addi	sp,sp,24
    8b98:	f800283a 	ret
    8b9c:	0005883a 	mov	r2,zero
    8ba0:	dfc00517 	ldw	ra,20(sp)
    8ba4:	dd000417 	ldw	r20,16(sp)
    8ba8:	dcc00317 	ldw	r19,12(sp)
    8bac:	dc800217 	ldw	r18,8(sp)
    8bb0:	dc400117 	ldw	r17,4(sp)
    8bb4:	dc000017 	ldw	r16,0(sp)
    8bb8:	dec00604 	addi	sp,sp,24
    8bbc:	f800283a 	ret
    8bc0:	00bfffc4 	movi	r2,-1
    8bc4:	003fed06 	br	8b7c <__sfvwrite_small_dev+0x94>

00008bc8 <_write_r>:
    8bc8:	defffd04 	addi	sp,sp,-12
    8bcc:	dc400115 	stw	r17,4(sp)
    8bd0:	dc000015 	stw	r16,0(sp)
    8bd4:	2023883a 	mov	r17,r4
    8bd8:	04000074 	movhi	r16,1
    8bdc:	842bcd04 	addi	r16,r16,-20684
    8be0:	2809883a 	mov	r4,r5
    8be4:	300b883a 	mov	r5,r6
    8be8:	380d883a 	mov	r6,r7
    8bec:	dfc00215 	stw	ra,8(sp)
    8bf0:	80000015 	stw	zero,0(r16)
    8bf4:	00093180 	call	9318 <write>
    8bf8:	00ffffc4 	movi	r3,-1
    8bfc:	10c00526 	beq	r2,r3,8c14 <_write_r+0x4c>
    8c00:	dfc00217 	ldw	ra,8(sp)
    8c04:	dc400117 	ldw	r17,4(sp)
    8c08:	dc000017 	ldw	r16,0(sp)
    8c0c:	dec00304 	addi	sp,sp,12
    8c10:	f800283a 	ret
    8c14:	80c00017 	ldw	r3,0(r16)
    8c18:	183ff926 	beq	r3,zero,8c00 <_write_r+0x38>
    8c1c:	88c00015 	stw	r3,0(r17)
    8c20:	dfc00217 	ldw	ra,8(sp)
    8c24:	dc400117 	ldw	r17,4(sp)
    8c28:	dc000017 	ldw	r16,0(sp)
    8c2c:	dec00304 	addi	sp,sp,12
    8c30:	f800283a 	ret

00008c34 <udivmodsi4>:
    8c34:	2005883a 	mov	r2,r4
    8c38:	2900182e 	bgeu	r5,r4,8c9c <udivmodsi4+0x68>
    8c3c:	28001716 	blt	r5,zero,8c9c <udivmodsi4+0x68>
    8c40:	01000804 	movi	r4,32
    8c44:	00c00044 	movi	r3,1
    8c48:	00000206 	br	8c54 <udivmodsi4+0x20>
    8c4c:	20001126 	beq	r4,zero,8c94 <udivmodsi4+0x60>
    8c50:	28000516 	blt	r5,zero,8c68 <udivmodsi4+0x34>
    8c54:	294b883a 	add	r5,r5,r5
    8c58:	213fffc4 	addi	r4,r4,-1
    8c5c:	18c7883a 	add	r3,r3,r3
    8c60:	28bffa36 	bltu	r5,r2,8c4c <udivmodsi4+0x18>
    8c64:	18000b26 	beq	r3,zero,8c94 <udivmodsi4+0x60>
    8c68:	0009883a 	mov	r4,zero
    8c6c:	11400236 	bltu	r2,r5,8c78 <udivmodsi4+0x44>
    8c70:	1145c83a 	sub	r2,r2,r5
    8c74:	20c8b03a 	or	r4,r4,r3
    8c78:	1806d07a 	srli	r3,r3,1
    8c7c:	280ad07a 	srli	r5,r5,1
    8c80:	183ffa1e 	bne	r3,zero,8c6c <udivmodsi4+0x38>
    8c84:	3000021e 	bne	r6,zero,8c90 <udivmodsi4+0x5c>
    8c88:	2005883a 	mov	r2,r4
    8c8c:	f800283a 	ret
    8c90:	f800283a 	ret
    8c94:	0009883a 	mov	r4,zero
    8c98:	003ffa06 	br	8c84 <udivmodsi4+0x50>
    8c9c:	00c00044 	movi	r3,1
    8ca0:	0009883a 	mov	r4,zero
    8ca4:	003ff106 	br	8c6c <udivmodsi4+0x38>

00008ca8 <__divsi3>:
    8ca8:	defffe04 	addi	sp,sp,-8
    8cac:	dfc00115 	stw	ra,4(sp)
    8cb0:	dc000015 	stw	r16,0(sp)
    8cb4:	20000a16 	blt	r4,zero,8ce0 <__divsi3+0x38>
    8cb8:	0021883a 	mov	r16,zero
    8cbc:	28000b16 	blt	r5,zero,8cec <__divsi3+0x44>
    8cc0:	000d883a 	mov	r6,zero
    8cc4:	0008c340 	call	8c34 <udivmodsi4>
    8cc8:	80000126 	beq	r16,zero,8cd0 <__divsi3+0x28>
    8ccc:	0085c83a 	sub	r2,zero,r2
    8cd0:	dfc00117 	ldw	ra,4(sp)
    8cd4:	dc000017 	ldw	r16,0(sp)
    8cd8:	dec00204 	addi	sp,sp,8
    8cdc:	f800283a 	ret
    8ce0:	0109c83a 	sub	r4,zero,r4
    8ce4:	04000044 	movi	r16,1
    8ce8:	283ff50e 	bge	r5,zero,8cc0 <__divsi3+0x18>
    8cec:	014bc83a 	sub	r5,zero,r5
    8cf0:	8400005c 	xori	r16,r16,1
    8cf4:	003ff206 	br	8cc0 <__divsi3+0x18>

00008cf8 <__modsi3>:
    8cf8:	deffff04 	addi	sp,sp,-4
    8cfc:	dfc00015 	stw	ra,0(sp)
    8d00:	20000516 	blt	r4,zero,8d18 <__modsi3+0x20>
    8d04:	28000c16 	blt	r5,zero,8d38 <__modsi3+0x40>
    8d08:	01800044 	movi	r6,1
    8d0c:	dfc00017 	ldw	ra,0(sp)
    8d10:	dec00104 	addi	sp,sp,4
    8d14:	0008c341 	jmpi	8c34 <udivmodsi4>
    8d18:	0109c83a 	sub	r4,zero,r4
    8d1c:	28000b16 	blt	r5,zero,8d4c <__modsi3+0x54>
    8d20:	01800044 	movi	r6,1
    8d24:	0008c340 	call	8c34 <udivmodsi4>
    8d28:	0085c83a 	sub	r2,zero,r2
    8d2c:	dfc00017 	ldw	ra,0(sp)
    8d30:	dec00104 	addi	sp,sp,4
    8d34:	f800283a 	ret
    8d38:	014bc83a 	sub	r5,zero,r5
    8d3c:	01800044 	movi	r6,1
    8d40:	dfc00017 	ldw	ra,0(sp)
    8d44:	dec00104 	addi	sp,sp,4
    8d48:	0008c341 	jmpi	8c34 <udivmodsi4>
    8d4c:	014bc83a 	sub	r5,zero,r5
    8d50:	003ff306 	br	8d20 <__modsi3+0x28>

00008d54 <__udivsi3>:
    8d54:	000d883a 	mov	r6,zero
    8d58:	0008c341 	jmpi	8c34 <udivmodsi4>

00008d5c <__umodsi3>:
    8d5c:	01800044 	movi	r6,1
    8d60:	0008c341 	jmpi	8c34 <udivmodsi4>

00008d64 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8d64:	defffc04 	addi	sp,sp,-16
    8d68:	df000315 	stw	fp,12(sp)
    8d6c:	df000304 	addi	fp,sp,12
    8d70:	e13ffd15 	stw	r4,-12(fp)
    8d74:	e17ffe15 	stw	r5,-8(fp)
    8d78:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8d7c:	e0fffe17 	ldw	r3,-8(fp)
    8d80:	e0bffd17 	ldw	r2,-12(fp)
    8d84:	18800e26 	beq	r3,r2,8dc0 <alt_load_section+0x5c>
  {
    while( to != end )
    8d88:	00000a06 	br	8db4 <alt_load_section+0x50>
    {
      *to++ = *from++;
    8d8c:	e0bffd17 	ldw	r2,-12(fp)
    8d90:	10c00017 	ldw	r3,0(r2)
    8d94:	e0bffe17 	ldw	r2,-8(fp)
    8d98:	10c00015 	stw	r3,0(r2)
    8d9c:	e0bffe17 	ldw	r2,-8(fp)
    8da0:	10800104 	addi	r2,r2,4
    8da4:	e0bffe15 	stw	r2,-8(fp)
    8da8:	e0bffd17 	ldw	r2,-12(fp)
    8dac:	10800104 	addi	r2,r2,4
    8db0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8db4:	e0fffe17 	ldw	r3,-8(fp)
    8db8:	e0bfff17 	ldw	r2,-4(fp)
    8dbc:	18bff31e 	bne	r3,r2,8d8c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    8dc0:	e037883a 	mov	sp,fp
    8dc4:	df000017 	ldw	fp,0(sp)
    8dc8:	dec00104 	addi	sp,sp,4
    8dcc:	f800283a 	ret

00008dd0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8dd0:	defffe04 	addi	sp,sp,-8
    8dd4:	dfc00115 	stw	ra,4(sp)
    8dd8:	df000015 	stw	fp,0(sp)
    8ddc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8de0:	01000074 	movhi	r4,1
    8de4:	212b0a04 	addi	r4,r4,-21464
    8de8:	01400074 	movhi	r5,1
    8dec:	296a4704 	addi	r5,r5,-22244
    8df0:	01800074 	movhi	r6,1
    8df4:	31ab0a04 	addi	r6,r6,-21464
    8df8:	0008d640 	call	8d64 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8dfc:	01000074 	movhi	r4,1
    8e00:	21200804 	addi	r4,r4,-32736
    8e04:	01400074 	movhi	r5,1
    8e08:	29600804 	addi	r5,r5,-32736
    8e0c:	01800074 	movhi	r6,1
    8e10:	31a06e04 	addi	r6,r6,-32328
    8e14:	0008d640 	call	8d64 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    8e18:	01000074 	movhi	r4,1
    8e1c:	212a2a04 	addi	r4,r4,-22360
    8e20:	01400074 	movhi	r5,1
    8e24:	296a2a04 	addi	r5,r5,-22360
    8e28:	01800074 	movhi	r6,1
    8e2c:	31aa4704 	addi	r6,r6,-22244
    8e30:	0008d640 	call	8d64 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8e34:	0009c240 	call	9c24 <alt_dcache_flush_all>
  alt_icache_flush_all();
    8e38:	0009fb40 	call	9fb4 <alt_icache_flush_all>
}
    8e3c:	e037883a 	mov	sp,fp
    8e40:	dfc00117 	ldw	ra,4(sp)
    8e44:	df000017 	ldw	fp,0(sp)
    8e48:	dec00204 	addi	sp,sp,8
    8e4c:	f800283a 	ret

00008e50 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8e50:	defffd04 	addi	sp,sp,-12
    8e54:	dfc00215 	stw	ra,8(sp)
    8e58:	df000115 	stw	fp,4(sp)
    8e5c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8e60:	0009883a 	mov	r4,zero
    8e64:	000943c0 	call	943c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8e68:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8e6c:	00094700 	call	9470 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    8e70:	01000074 	movhi	r4,1
    8e74:	212a3704 	addi	r4,r4,-22308
    8e78:	01400074 	movhi	r5,1
    8e7c:	296a3704 	addi	r5,r5,-22308
    8e80:	01800074 	movhi	r6,1
    8e84:	31aa3704 	addi	r6,r6,-22308
    8e88:	000a36c0 	call	a36c <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8e8c:	d120cf17 	ldw	r4,-31940(gp)
    8e90:	d0e0d017 	ldw	r3,-31936(gp)
    8e94:	d0a0d117 	ldw	r2,-31932(gp)
    8e98:	180b883a 	mov	r5,r3
    8e9c:	100d883a 	mov	r6,r2
    8ea0:	00081f40 	call	81f4 <main>
    8ea4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    8ea8:	01000044 	movi	r4,1
    8eac:	0009b5c0 	call	9b5c <close>
  exit (result);
    8eb0:	e13fff17 	ldw	r4,-4(fp)
    8eb4:	000a62c0 	call	a62c <exit>

00008eb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8eb8:	defffe04 	addi	sp,sp,-8
    8ebc:	dfc00115 	stw	ra,4(sp)
    8ec0:	df000015 	stw	fp,0(sp)
    8ec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8ec8:	00800074 	movhi	r2,1
    8ecc:	10ab0604 	addi	r2,r2,-21480
    8ed0:	10800017 	ldw	r2,0(r2)
    8ed4:	10000526 	beq	r2,zero,8eec <alt_get_errno+0x34>
    8ed8:	00800074 	movhi	r2,1
    8edc:	10ab0604 	addi	r2,r2,-21480
    8ee0:	10800017 	ldw	r2,0(r2)
    8ee4:	103ee83a 	callr	r2
    8ee8:	00000206 	br	8ef4 <alt_get_errno+0x3c>
    8eec:	00800074 	movhi	r2,1
    8ef0:	10abcd04 	addi	r2,r2,-20684
}
    8ef4:	e037883a 	mov	sp,fp
    8ef8:	dfc00117 	ldw	ra,4(sp)
    8efc:	df000017 	ldw	fp,0(sp)
    8f00:	dec00204 	addi	sp,sp,8
    8f04:	f800283a 	ret

00008f08 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    8f08:	defffd04 	addi	sp,sp,-12
    8f0c:	df000215 	stw	fp,8(sp)
    8f10:	df000204 	addi	fp,sp,8
    8f14:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    8f18:	e0bfff17 	ldw	r2,-4(fp)
    8f1c:	10800217 	ldw	r2,8(r2)
    8f20:	10d00034 	orhi	r3,r2,16384
    8f24:	e0bfff17 	ldw	r2,-4(fp)
    8f28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8f2c:	e03ffe15 	stw	zero,-8(fp)
    8f30:	00001d06 	br	8fa8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8f34:	00c00074 	movhi	r3,1
    8f38:	18ea9f04 	addi	r3,r3,-21892
    8f3c:	e0bffe17 	ldw	r2,-8(fp)
    8f40:	10800324 	muli	r2,r2,12
    8f44:	1885883a 	add	r2,r3,r2
    8f48:	10c00017 	ldw	r3,0(r2)
    8f4c:	e0bfff17 	ldw	r2,-4(fp)
    8f50:	10800017 	ldw	r2,0(r2)
    8f54:	1880111e 	bne	r3,r2,8f9c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8f58:	00c00074 	movhi	r3,1
    8f5c:	18ea9f04 	addi	r3,r3,-21892
    8f60:	e0bffe17 	ldw	r2,-8(fp)
    8f64:	10800324 	muli	r2,r2,12
    8f68:	1885883a 	add	r2,r3,r2
    8f6c:	10800204 	addi	r2,r2,8
    8f70:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    8f74:	1000090e 	bge	r2,zero,8f9c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    8f78:	e0bffe17 	ldw	r2,-8(fp)
    8f7c:	10c00324 	muli	r3,r2,12
    8f80:	00800074 	movhi	r2,1
    8f84:	10aa9f04 	addi	r2,r2,-21892
    8f88:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    8f8c:	e0bfff17 	ldw	r2,-4(fp)
    8f90:	18800226 	beq	r3,r2,8f9c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    8f94:	00bffcc4 	movi	r2,-13
    8f98:	00000a06 	br	8fc4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    8f9c:	e0bffe17 	ldw	r2,-8(fp)
    8fa0:	10800044 	addi	r2,r2,1
    8fa4:	e0bffe15 	stw	r2,-8(fp)
    8fa8:	00800074 	movhi	r2,1
    8fac:	10ab0504 	addi	r2,r2,-21484
    8fb0:	10800017 	ldw	r2,0(r2)
    8fb4:	1007883a 	mov	r3,r2
    8fb8:	e0bffe17 	ldw	r2,-8(fp)
    8fbc:	18bfdd2e 	bgeu	r3,r2,8f34 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    8fc0:	0005883a 	mov	r2,zero
}
    8fc4:	e037883a 	mov	sp,fp
    8fc8:	df000017 	ldw	fp,0(sp)
    8fcc:	dec00104 	addi	sp,sp,4
    8fd0:	f800283a 	ret

00008fd4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    8fd4:	defff604 	addi	sp,sp,-40
    8fd8:	dfc00915 	stw	ra,36(sp)
    8fdc:	df000815 	stw	fp,32(sp)
    8fe0:	df000804 	addi	fp,sp,32
    8fe4:	e13ffd15 	stw	r4,-12(fp)
    8fe8:	e17ffe15 	stw	r5,-8(fp)
    8fec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    8ff0:	00bfffc4 	movi	r2,-1
    8ff4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    8ff8:	00bffb44 	movi	r2,-19
    8ffc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9000:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9004:	e13ffd17 	ldw	r4,-12(fp)
    9008:	01400074 	movhi	r5,1
    900c:	296b0304 	addi	r5,r5,-21492
    9010:	0009d5c0 	call	9d5c <alt_find_dev>
    9014:	e0bff815 	stw	r2,-32(fp)
    9018:	e0bff817 	ldw	r2,-32(fp)
    901c:	1000051e 	bne	r2,zero,9034 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    9020:	e13ffd17 	ldw	r4,-12(fp)
    9024:	0009dec0 	call	9dec <alt_find_file>
    9028:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    902c:	00800044 	movi	r2,1
    9030:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9034:	e0bff817 	ldw	r2,-32(fp)
    9038:	10002926 	beq	r2,zero,90e0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    903c:	e13ff817 	ldw	r4,-32(fp)
    9040:	0009f000 	call	9f00 <alt_get_fd>
    9044:	e0bff915 	stw	r2,-28(fp)
    9048:	e0bff917 	ldw	r2,-28(fp)
    904c:	1000030e 	bge	r2,zero,905c <open+0x88>
    {
      status = index;
    9050:	e0bff917 	ldw	r2,-28(fp)
    9054:	e0bffa15 	stw	r2,-24(fp)
    9058:	00002306 	br	90e8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    905c:	e0bff917 	ldw	r2,-28(fp)
    9060:	10c00324 	muli	r3,r2,12
    9064:	00800074 	movhi	r2,1
    9068:	10aa9f04 	addi	r2,r2,-21892
    906c:	1885883a 	add	r2,r3,r2
    9070:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    9074:	e0fffe17 	ldw	r3,-8(fp)
    9078:	00900034 	movhi	r2,16384
    907c:	10bfffc4 	addi	r2,r2,-1
    9080:	1886703a 	and	r3,r3,r2
    9084:	e0bffc17 	ldw	r2,-16(fp)
    9088:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    908c:	e0bffb17 	ldw	r2,-20(fp)
    9090:	1000051e 	bne	r2,zero,90a8 <open+0xd4>
    9094:	e13ffc17 	ldw	r4,-16(fp)
    9098:	0008f080 	call	8f08 <alt_file_locked>
    909c:	e0bffa15 	stw	r2,-24(fp)
    90a0:	e0bffa17 	ldw	r2,-24(fp)
    90a4:	10001016 	blt	r2,zero,90e8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    90a8:	e0bff817 	ldw	r2,-32(fp)
    90ac:	10800317 	ldw	r2,12(r2)
    90b0:	10000826 	beq	r2,zero,90d4 <open+0x100>
    90b4:	e0bff817 	ldw	r2,-32(fp)
    90b8:	10800317 	ldw	r2,12(r2)
    90bc:	e13ffc17 	ldw	r4,-16(fp)
    90c0:	e17ffd17 	ldw	r5,-12(fp)
    90c4:	e1bffe17 	ldw	r6,-8(fp)
    90c8:	e1ffff17 	ldw	r7,-4(fp)
    90cc:	103ee83a 	callr	r2
    90d0:	00000106 	br	90d8 <open+0x104>
    90d4:	0005883a 	mov	r2,zero
    90d8:	e0bffa15 	stw	r2,-24(fp)
    90dc:	00000206 	br	90e8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    90e0:	00bffb44 	movi	r2,-19
    90e4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    90e8:	e0bffa17 	ldw	r2,-24(fp)
    90ec:	1000080e 	bge	r2,zero,9110 <open+0x13c>
  {
    alt_release_fd (index);  
    90f0:	e13ff917 	ldw	r4,-28(fp)
    90f4:	00092680 	call	9268 <alt_release_fd>
    ALT_ERRNO = -status;
    90f8:	0008eb80 	call	8eb8 <alt_get_errno>
    90fc:	e0fffa17 	ldw	r3,-24(fp)
    9100:	00c7c83a 	sub	r3,zero,r3
    9104:	10c00015 	stw	r3,0(r2)
    return -1;
    9108:	00bfffc4 	movi	r2,-1
    910c:	00000106 	br	9114 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    9110:	e0bff917 	ldw	r2,-28(fp)
}
    9114:	e037883a 	mov	sp,fp
    9118:	dfc00117 	ldw	ra,4(sp)
    911c:	df000017 	ldw	fp,0(sp)
    9120:	dec00204 	addi	sp,sp,8
    9124:	f800283a 	ret

00009128 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9128:	defffe04 	addi	sp,sp,-8
    912c:	dfc00115 	stw	ra,4(sp)
    9130:	df000015 	stw	fp,0(sp)
    9134:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9138:	00800074 	movhi	r2,1
    913c:	10ab0604 	addi	r2,r2,-21480
    9140:	10800017 	ldw	r2,0(r2)
    9144:	10000526 	beq	r2,zero,915c <alt_get_errno+0x34>
    9148:	00800074 	movhi	r2,1
    914c:	10ab0604 	addi	r2,r2,-21480
    9150:	10800017 	ldw	r2,0(r2)
    9154:	103ee83a 	callr	r2
    9158:	00000206 	br	9164 <alt_get_errno+0x3c>
    915c:	00800074 	movhi	r2,1
    9160:	10abcd04 	addi	r2,r2,-20684
}
    9164:	e037883a 	mov	sp,fp
    9168:	dfc00117 	ldw	ra,4(sp)
    916c:	df000017 	ldw	fp,0(sp)
    9170:	dec00204 	addi	sp,sp,8
    9174:	f800283a 	ret

00009178 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    9178:	defff904 	addi	sp,sp,-28
    917c:	dfc00615 	stw	ra,24(sp)
    9180:	df000515 	stw	fp,20(sp)
    9184:	df000504 	addi	fp,sp,20
    9188:	e13ffd15 	stw	r4,-12(fp)
    918c:	e17ffe15 	stw	r5,-8(fp)
    9190:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9194:	e0bffd17 	ldw	r2,-12(fp)
    9198:	10000616 	blt	r2,zero,91b4 <read+0x3c>
    919c:	e0bffd17 	ldw	r2,-12(fp)
    91a0:	10c00324 	muli	r3,r2,12
    91a4:	00800074 	movhi	r2,1
    91a8:	10aa9f04 	addi	r2,r2,-21892
    91ac:	1885883a 	add	r2,r3,r2
    91b0:	00000106 	br	91b8 <read+0x40>
    91b4:	0005883a 	mov	r2,zero
    91b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    91bc:	e0bffb17 	ldw	r2,-20(fp)
    91c0:	10002026 	beq	r2,zero,9244 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    91c4:	e0bffb17 	ldw	r2,-20(fp)
    91c8:	10800217 	ldw	r2,8(r2)
    91cc:	108000cc 	andi	r2,r2,3
    91d0:	10800060 	cmpeqi	r2,r2,1
    91d4:	1000171e 	bne	r2,zero,9234 <read+0xbc>
        (fd->dev->read))
    91d8:	e0bffb17 	ldw	r2,-20(fp)
    91dc:	10800017 	ldw	r2,0(r2)
    91e0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    91e4:	10001326 	beq	r2,zero,9234 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    91e8:	e0bffb17 	ldw	r2,-20(fp)
    91ec:	10800017 	ldw	r2,0(r2)
    91f0:	10c00517 	ldw	r3,20(r2)
    91f4:	e0bfff17 	ldw	r2,-4(fp)
    91f8:	e13ffb17 	ldw	r4,-20(fp)
    91fc:	e17ffe17 	ldw	r5,-8(fp)
    9200:	100d883a 	mov	r6,r2
    9204:	183ee83a 	callr	r3
    9208:	e0bffc15 	stw	r2,-16(fp)
    920c:	e0bffc17 	ldw	r2,-16(fp)
    9210:	1000060e 	bge	r2,zero,922c <read+0xb4>
        {
          ALT_ERRNO = -rval;
    9214:	00091280 	call	9128 <alt_get_errno>
    9218:	e0fffc17 	ldw	r3,-16(fp)
    921c:	00c7c83a 	sub	r3,zero,r3
    9220:	10c00015 	stw	r3,0(r2)
          return -1;
    9224:	00bfffc4 	movi	r2,-1
    9228:	00000a06 	br	9254 <read+0xdc>
        }
        return rval;
    922c:	e0bffc17 	ldw	r2,-16(fp)
    9230:	00000806 	br	9254 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
    9234:	00091280 	call	9128 <alt_get_errno>
    9238:	00c00344 	movi	r3,13
    923c:	10c00015 	stw	r3,0(r2)
    9240:	00000306 	br	9250 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    9244:	00091280 	call	9128 <alt_get_errno>
    9248:	00c01444 	movi	r3,81
    924c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    9250:	00bfffc4 	movi	r2,-1
}
    9254:	e037883a 	mov	sp,fp
    9258:	dfc00117 	ldw	ra,4(sp)
    925c:	df000017 	ldw	fp,0(sp)
    9260:	dec00204 	addi	sp,sp,8
    9264:	f800283a 	ret

00009268 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9268:	defffe04 	addi	sp,sp,-8
    926c:	df000115 	stw	fp,4(sp)
    9270:	df000104 	addi	fp,sp,4
    9274:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    9278:	e0bfff17 	ldw	r2,-4(fp)
    927c:	108000d0 	cmplti	r2,r2,3
    9280:	10000d1e 	bne	r2,zero,92b8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    9284:	00c00074 	movhi	r3,1
    9288:	18ea9f04 	addi	r3,r3,-21892
    928c:	e0bfff17 	ldw	r2,-4(fp)
    9290:	10800324 	muli	r2,r2,12
    9294:	1885883a 	add	r2,r3,r2
    9298:	10800204 	addi	r2,r2,8
    929c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    92a0:	00c00074 	movhi	r3,1
    92a4:	18ea9f04 	addi	r3,r3,-21892
    92a8:	e0bfff17 	ldw	r2,-4(fp)
    92ac:	10800324 	muli	r2,r2,12
    92b0:	1885883a 	add	r2,r3,r2
    92b4:	10000015 	stw	zero,0(r2)
  }
}
    92b8:	e037883a 	mov	sp,fp
    92bc:	df000017 	ldw	fp,0(sp)
    92c0:	dec00104 	addi	sp,sp,4
    92c4:	f800283a 	ret

000092c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    92c8:	defffe04 	addi	sp,sp,-8
    92cc:	dfc00115 	stw	ra,4(sp)
    92d0:	df000015 	stw	fp,0(sp)
    92d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    92d8:	00800074 	movhi	r2,1
    92dc:	10ab0604 	addi	r2,r2,-21480
    92e0:	10800017 	ldw	r2,0(r2)
    92e4:	10000526 	beq	r2,zero,92fc <alt_get_errno+0x34>
    92e8:	00800074 	movhi	r2,1
    92ec:	10ab0604 	addi	r2,r2,-21480
    92f0:	10800017 	ldw	r2,0(r2)
    92f4:	103ee83a 	callr	r2
    92f8:	00000206 	br	9304 <alt_get_errno+0x3c>
    92fc:	00800074 	movhi	r2,1
    9300:	10abcd04 	addi	r2,r2,-20684
}
    9304:	e037883a 	mov	sp,fp
    9308:	dfc00117 	ldw	ra,4(sp)
    930c:	df000017 	ldw	fp,0(sp)
    9310:	dec00204 	addi	sp,sp,8
    9314:	f800283a 	ret

00009318 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9318:	defff904 	addi	sp,sp,-28
    931c:	dfc00615 	stw	ra,24(sp)
    9320:	df000515 	stw	fp,20(sp)
    9324:	df000504 	addi	fp,sp,20
    9328:	e13ffd15 	stw	r4,-12(fp)
    932c:	e17ffe15 	stw	r5,-8(fp)
    9330:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9334:	e0bffd17 	ldw	r2,-12(fp)
    9338:	10000616 	blt	r2,zero,9354 <write+0x3c>
    933c:	e0bffd17 	ldw	r2,-12(fp)
    9340:	10c00324 	muli	r3,r2,12
    9344:	00800074 	movhi	r2,1
    9348:	10aa9f04 	addi	r2,r2,-21892
    934c:	1885883a 	add	r2,r3,r2
    9350:	00000106 	br	9358 <write+0x40>
    9354:	0005883a 	mov	r2,zero
    9358:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    935c:	e0bffb17 	ldw	r2,-20(fp)
    9360:	10001f26 	beq	r2,zero,93e0 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    9364:	e0bffb17 	ldw	r2,-20(fp)
    9368:	10800217 	ldw	r2,8(r2)
    936c:	108000cc 	andi	r2,r2,3
    9370:	10001726 	beq	r2,zero,93d0 <write+0xb8>
    9374:	e0bffb17 	ldw	r2,-20(fp)
    9378:	10800017 	ldw	r2,0(r2)
    937c:	10800617 	ldw	r2,24(r2)
    9380:	10001326 	beq	r2,zero,93d0 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    9384:	e0bffb17 	ldw	r2,-20(fp)
    9388:	10800017 	ldw	r2,0(r2)
    938c:	10c00617 	ldw	r3,24(r2)
    9390:	e0bfff17 	ldw	r2,-4(fp)
    9394:	e13ffb17 	ldw	r4,-20(fp)
    9398:	e17ffe17 	ldw	r5,-8(fp)
    939c:	100d883a 	mov	r6,r2
    93a0:	183ee83a 	callr	r3
    93a4:	e0bffc15 	stw	r2,-16(fp)
    93a8:	e0bffc17 	ldw	r2,-16(fp)
    93ac:	1000060e 	bge	r2,zero,93c8 <write+0xb0>
      {
        ALT_ERRNO = -rval;
    93b0:	00092c80 	call	92c8 <alt_get_errno>
    93b4:	e0fffc17 	ldw	r3,-16(fp)
    93b8:	00c7c83a 	sub	r3,zero,r3
    93bc:	10c00015 	stw	r3,0(r2)
        return -1;
    93c0:	00bfffc4 	movi	r2,-1
    93c4:	00000a06 	br	93f0 <write+0xd8>
      }
      return rval;
    93c8:	e0bffc17 	ldw	r2,-16(fp)
    93cc:	00000806 	br	93f0 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
    93d0:	00092c80 	call	92c8 <alt_get_errno>
    93d4:	00c00344 	movi	r3,13
    93d8:	10c00015 	stw	r3,0(r2)
    93dc:	00000306 	br	93ec <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    93e0:	00092c80 	call	92c8 <alt_get_errno>
    93e4:	00c01444 	movi	r3,81
    93e8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    93ec:	00bfffc4 	movi	r2,-1
}
    93f0:	e037883a 	mov	sp,fp
    93f4:	dfc00117 	ldw	ra,4(sp)
    93f8:	df000017 	ldw	fp,0(sp)
    93fc:	dec00204 	addi	sp,sp,8
    9400:	f800283a 	ret

00009404 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9404:	defffd04 	addi	sp,sp,-12
    9408:	dfc00215 	stw	ra,8(sp)
    940c:	df000115 	stw	fp,4(sp)
    9410:	df000104 	addi	fp,sp,4
    9414:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9418:	e13fff17 	ldw	r4,-4(fp)
    941c:	01400074 	movhi	r5,1
    9420:	296b0304 	addi	r5,r5,-21492
    9424:	0009cbc0 	call	9cbc <alt_dev_llist_insert>
}
    9428:	e037883a 	mov	sp,fp
    942c:	dfc00117 	ldw	ra,4(sp)
    9430:	df000017 	ldw	fp,0(sp)
    9434:	dec00204 	addi	sp,sp,8
    9438:	f800283a 	ret

0000943c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    943c:	defffd04 	addi	sp,sp,-12
    9440:	dfc00215 	stw	ra,8(sp)
    9444:	df000115 	stw	fp,4(sp)
    9448:	df000104 	addi	fp,sp,4
    944c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    9450:	000a5800 	call	a580 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9454:	00800044 	movi	r2,1
    9458:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    945c:	e037883a 	mov	sp,fp
    9460:	dfc00117 	ldw	ra,4(sp)
    9464:	df000017 	ldw	fp,0(sp)
    9468:	dec00204 	addi	sp,sp,8
    946c:	f800283a 	ret

00009470 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9470:	defffe04 	addi	sp,sp,-8
    9474:	dfc00115 	stw	ra,4(sp)
    9478:	df000015 	stw	fp,0(sp)
    947c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    9480:	01000074 	movhi	r4,1
    9484:	21040004 	addi	r4,r4,4096
    9488:	000b883a 	mov	r5,zero
    948c:	01800044 	movi	r6,1
    9490:	01c0fa04 	movi	r7,1000
    9494:	00097880 	call	9788 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    9498:	01000074 	movhi	r4,1
    949c:	212a7f04 	addi	r4,r4,-22020
    94a0:	00094040 	call	9404 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    94a4:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    94a8:	01000074 	movhi	r4,1
    94ac:	212a8a04 	addi	r4,r4,-21976
    94b0:	00094040 	call	9404 <alt_dev_reg>
}
    94b4:	e037883a 	mov	sp,fp
    94b8:	dfc00117 	ldw	ra,4(sp)
    94bc:	df000017 	ldw	fp,0(sp)
    94c0:	dec00204 	addi	sp,sp,8
    94c4:	f800283a 	ret

000094c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    94c8:	defffa04 	addi	sp,sp,-24
    94cc:	dfc00515 	stw	ra,20(sp)
    94d0:	df000415 	stw	fp,16(sp)
    94d4:	df000404 	addi	fp,sp,16
    94d8:	e13ffd15 	stw	r4,-12(fp)
    94dc:	e17ffe15 	stw	r5,-8(fp)
    94e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    94e4:	e0bffd17 	ldw	r2,-12(fp)
    94e8:	10800017 	ldw	r2,0(r2)
    94ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    94f0:	e0bffc17 	ldw	r2,-16(fp)
    94f4:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    94f8:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    94fc:	10800217 	ldw	r2,8(r2)
    9500:	1809883a 	mov	r4,r3
    9504:	e17ffe17 	ldw	r5,-8(fp)
    9508:	e1bfff17 	ldw	r6,-4(fp)
    950c:	100f883a 	mov	r7,r2
    9510:	00095880 	call	9588 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9514:	e037883a 	mov	sp,fp
    9518:	dfc00117 	ldw	ra,4(sp)
    951c:	df000017 	ldw	fp,0(sp)
    9520:	dec00204 	addi	sp,sp,8
    9524:	f800283a 	ret

00009528 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9528:	defffa04 	addi	sp,sp,-24
    952c:	dfc00515 	stw	ra,20(sp)
    9530:	df000415 	stw	fp,16(sp)
    9534:	df000404 	addi	fp,sp,16
    9538:	e13ffd15 	stw	r4,-12(fp)
    953c:	e17ffe15 	stw	r5,-8(fp)
    9540:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9544:	e0bffd17 	ldw	r2,-12(fp)
    9548:	10800017 	ldw	r2,0(r2)
    954c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    9550:	e0bffc17 	ldw	r2,-16(fp)
    9554:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9558:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    955c:	10800217 	ldw	r2,8(r2)
    9560:	1809883a 	mov	r4,r3
    9564:	e17ffe17 	ldw	r5,-8(fp)
    9568:	e1bfff17 	ldw	r6,-4(fp)
    956c:	100f883a 	mov	r7,r2
    9570:	000967c0 	call	967c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    9574:	e037883a 	mov	sp,fp
    9578:	dfc00117 	ldw	ra,4(sp)
    957c:	df000017 	ldw	fp,0(sp)
    9580:	dec00204 	addi	sp,sp,8
    9584:	f800283a 	ret

00009588 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    9588:	defff704 	addi	sp,sp,-36
    958c:	df000815 	stw	fp,32(sp)
    9590:	df000804 	addi	fp,sp,32
    9594:	e13ffc15 	stw	r4,-16(fp)
    9598:	e17ffd15 	stw	r5,-12(fp)
    959c:	e1bffe15 	stw	r6,-8(fp)
    95a0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    95a4:	e0bffc17 	ldw	r2,-16(fp)
    95a8:	10800017 	ldw	r2,0(r2)
    95ac:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    95b0:	e0bffd17 	ldw	r2,-12(fp)
    95b4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    95b8:	e0bffe17 	ldw	r2,-8(fp)
    95bc:	e0fffd17 	ldw	r3,-12(fp)
    95c0:	1885883a 	add	r2,r3,r2
    95c4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    95c8:	00001406 	br	961c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    95cc:	e0bff917 	ldw	r2,-28(fp)
    95d0:	10800037 	ldwio	r2,0(r2)
    95d4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    95d8:	e0bffb17 	ldw	r2,-20(fp)
    95dc:	10a0000c 	andi	r2,r2,32768
    95e0:	10000826 	beq	r2,zero,9604 <altera_avalon_jtag_uart_read+0x7c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    95e4:	e0bffb17 	ldw	r2,-20(fp)
    95e8:	1007883a 	mov	r3,r2
    95ec:	e0bff817 	ldw	r2,-32(fp)
    95f0:	10c00005 	stb	r3,0(r2)
    95f4:	e0bff817 	ldw	r2,-32(fp)
    95f8:	10800044 	addi	r2,r2,1
    95fc:	e0bff815 	stw	r2,-32(fp)
    9600:	00000606 	br	961c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
    9604:	e0fff817 	ldw	r3,-32(fp)
    9608:	e0bffd17 	ldw	r2,-12(fp)
    960c:	1880071e 	bne	r3,r2,962c <altera_avalon_jtag_uart_read+0xa4>
      break;
    else if(flags & O_NONBLOCK)
    9610:	e0bfff17 	ldw	r2,-4(fp)
    9614:	1090000c 	andi	r2,r2,16384
    9618:	1000061e 	bne	r2,zero,9634 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    961c:	e0fff817 	ldw	r3,-32(fp)
    9620:	e0bffa17 	ldw	r2,-24(fp)
    9624:	18bfe936 	bltu	r3,r2,95cc <altera_avalon_jtag_uart_read+0x44>
    9628:	00000306 	br	9638 <altera_avalon_jtag_uart_read+0xb0>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    962c:	0001883a 	nop
    9630:	00000106 	br	9638 <altera_avalon_jtag_uart_read+0xb0>
    else if(flags & O_NONBLOCK)
      break;   
    9634:	0001883a 	nop
    
  }

  if (ptr != buffer)
    9638:	e0fff817 	ldw	r3,-32(fp)
    963c:	e0bffd17 	ldw	r2,-12(fp)
    9640:	18800426 	beq	r3,r2,9654 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    9644:	e0fff817 	ldw	r3,-32(fp)
    9648:	e0bffd17 	ldw	r2,-12(fp)
    964c:	1885c83a 	sub	r2,r3,r2
    9650:	00000606 	br	966c <altera_avalon_jtag_uart_read+0xe4>
  else if (flags & O_NONBLOCK)
    9654:	e0bfff17 	ldw	r2,-4(fp)
    9658:	1090000c 	andi	r2,r2,16384
    965c:	10000226 	beq	r2,zero,9668 <altera_avalon_jtag_uart_read+0xe0>
    return -EWOULDBLOCK;
    9660:	00bffd44 	movi	r2,-11
    9664:	00000106 	br	966c <altera_avalon_jtag_uart_read+0xe4>
  else
    return -EIO;
    9668:	00bffec4 	movi	r2,-5
}
    966c:	e037883a 	mov	sp,fp
    9670:	df000017 	ldw	fp,0(sp)
    9674:	dec00104 	addi	sp,sp,4
    9678:	f800283a 	ret

0000967c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    967c:	defff904 	addi	sp,sp,-28
    9680:	df000615 	stw	fp,24(sp)
    9684:	df000604 	addi	fp,sp,24
    9688:	e13ffc15 	stw	r4,-16(fp)
    968c:	e17ffd15 	stw	r5,-12(fp)
    9690:	e1bffe15 	stw	r6,-8(fp)
    9694:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9698:	e0bffc17 	ldw	r2,-16(fp)
    969c:	10800017 	ldw	r2,0(r2)
    96a0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    96a4:	e0bffe17 	ldw	r2,-8(fp)
    96a8:	e0fffd17 	ldw	r3,-12(fp)
    96ac:	1885883a 	add	r2,r3,r2
    96b0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    96b4:	00000f06 	br	96f4 <altera_avalon_jtag_uart_write+0x78>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    96b8:	e0bffa17 	ldw	r2,-24(fp)
    96bc:	10800104 	addi	r2,r2,4
    96c0:	10800037 	ldwio	r2,0(r2)
    96c4:	10bfffec 	andhi	r2,r2,65535
    96c8:	10000a26 	beq	r2,zero,96f4 <altera_avalon_jtag_uart_write+0x78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    96cc:	e0bffa17 	ldw	r2,-24(fp)
    96d0:	e0fffd17 	ldw	r3,-12(fp)
    96d4:	18c00003 	ldbu	r3,0(r3)
    96d8:	18c03fcc 	andi	r3,r3,255
    96dc:	18c0201c 	xori	r3,r3,128
    96e0:	18ffe004 	addi	r3,r3,-128
    96e4:	e13ffd17 	ldw	r4,-12(fp)
    96e8:	21000044 	addi	r4,r4,1
    96ec:	e13ffd15 	stw	r4,-12(fp)
    96f0:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    96f4:	e0fffd17 	ldw	r3,-12(fp)
    96f8:	e0bffb17 	ldw	r2,-20(fp)
    96fc:	18bfee36 	bltu	r3,r2,96b8 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9700:	e0bffe17 	ldw	r2,-8(fp)
}
    9704:	e037883a 	mov	sp,fp
    9708:	df000017 	ldw	fp,0(sp)
    970c:	dec00104 	addi	sp,sp,4
    9710:	f800283a 	ret

00009714 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9714:	defffa04 	addi	sp,sp,-24
    9718:	dfc00515 	stw	ra,20(sp)
    971c:	df000415 	stw	fp,16(sp)
    9720:	df000404 	addi	fp,sp,16
    9724:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9728:	0007883a 	mov	r3,zero
    972c:	e0bfff17 	ldw	r2,-4(fp)
    9730:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9734:	e0bfff17 	ldw	r2,-4(fp)
    9738:	10800104 	addi	r2,r2,4
    973c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9740:	0005303a 	rdctl	r2,status
    9744:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9748:	e0fffd17 	ldw	r3,-12(fp)
    974c:	00bfff84 	movi	r2,-2
    9750:	1884703a 	and	r2,r3,r2
    9754:	1001703a 	wrctl	status,r2
  
  return context;
    9758:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    975c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    9760:	000a47c0 	call	a47c <alt_tick>
    9764:	e0bffc17 	ldw	r2,-16(fp)
    9768:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    976c:	e0bffe17 	ldw	r2,-8(fp)
    9770:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    9774:	e037883a 	mov	sp,fp
    9778:	dfc00117 	ldw	ra,4(sp)
    977c:	df000017 	ldw	fp,0(sp)
    9780:	dec00204 	addi	sp,sp,8
    9784:	f800283a 	ret

00009788 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9788:	defff804 	addi	sp,sp,-32
    978c:	dfc00715 	stw	ra,28(sp)
    9790:	df000615 	stw	fp,24(sp)
    9794:	df000604 	addi	fp,sp,24
    9798:	e13ffc15 	stw	r4,-16(fp)
    979c:	e17ffd15 	stw	r5,-12(fp)
    97a0:	e1bffe15 	stw	r6,-8(fp)
    97a4:	e1ffff15 	stw	r7,-4(fp)
    97a8:	e0bfff17 	ldw	r2,-4(fp)
    97ac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    97b0:	00800074 	movhi	r2,1
    97b4:	10abd204 	addi	r2,r2,-20664
    97b8:	10800017 	ldw	r2,0(r2)
    97bc:	1000041e 	bne	r2,zero,97d0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    97c0:	00800074 	movhi	r2,1
    97c4:	10abd204 	addi	r2,r2,-20664
    97c8:	e0fffb17 	ldw	r3,-20(fp)
    97cc:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    97d0:	e0bffc17 	ldw	r2,-16(fp)
    97d4:	10800104 	addi	r2,r2,4
    97d8:	00c001c4 	movi	r3,7
    97dc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    97e0:	d8000015 	stw	zero,0(sp)
    97e4:	e13ffd17 	ldw	r4,-12(fp)
    97e8:	e17ffe17 	ldw	r5,-8(fp)
    97ec:	01800074 	movhi	r6,1
    97f0:	31a5c504 	addi	r6,r6,-26860
    97f4:	e1fffc17 	ldw	r7,-16(fp)
    97f8:	0009fe40 	call	9fe4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    97fc:	e037883a 	mov	sp,fp
    9800:	dfc00117 	ldw	ra,4(sp)
    9804:	df000017 	ldw	fp,0(sp)
    9808:	dec00204 	addi	sp,sp,8
    980c:	f800283a 	ret

00009810 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    9810:	defffa04 	addi	sp,sp,-24
    9814:	dfc00515 	stw	ra,20(sp)
    9818:	df000415 	stw	fp,16(sp)
    981c:	df000404 	addi	fp,sp,16
    9820:	e13ffd15 	stw	r4,-12(fp)
    9824:	e17ffe15 	stw	r5,-8(fp)
    9828:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    982c:	e0bffd17 	ldw	r2,-12(fp)
    9830:	10800017 	ldw	r2,0(r2)
    9834:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    9838:	e0bffc17 	ldw	r2,-16(fp)
    983c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    9840:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    9844:	10800217 	ldw	r2,8(r2)
    9848:	1809883a 	mov	r4,r3
    984c:	e17ffe17 	ldw	r5,-8(fp)
    9850:	e1bfff17 	ldw	r6,-4(fp)
    9854:	100f883a 	mov	r7,r2
    9858:	00099200 	call	9920 <altera_avalon_uart_read>
      fd->fd_flags);
}
    985c:	e037883a 	mov	sp,fp
    9860:	dfc00117 	ldw	ra,4(sp)
    9864:	df000017 	ldw	fp,0(sp)
    9868:	dec00204 	addi	sp,sp,8
    986c:	f800283a 	ret

00009870 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    9870:	defffa04 	addi	sp,sp,-24
    9874:	dfc00515 	stw	ra,20(sp)
    9878:	df000415 	stw	fp,16(sp)
    987c:	df000404 	addi	fp,sp,16
    9880:	e13ffd15 	stw	r4,-12(fp)
    9884:	e17ffe15 	stw	r5,-8(fp)
    9888:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    988c:	e0bffd17 	ldw	r2,-12(fp)
    9890:	10800017 	ldw	r2,0(r2)
    9894:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    9898:	e0bffc17 	ldw	r2,-16(fp)
    989c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    98a0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    98a4:	10800217 	ldw	r2,8(r2)
    98a8:	1809883a 	mov	r4,r3
    98ac:	e17ffe17 	ldw	r5,-8(fp)
    98b0:	e1bfff17 	ldw	r6,-4(fp)
    98b4:	100f883a 	mov	r7,r2
    98b8:	0009a300 	call	9a30 <altera_avalon_uart_write>
      fd->fd_flags);
}
    98bc:	e037883a 	mov	sp,fp
    98c0:	dfc00117 	ldw	ra,4(sp)
    98c4:	df000017 	ldw	fp,0(sp)
    98c8:	dec00204 	addi	sp,sp,8
    98cc:	f800283a 	ret

000098d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    98d0:	defffe04 	addi	sp,sp,-8
    98d4:	dfc00115 	stw	ra,4(sp)
    98d8:	df000015 	stw	fp,0(sp)
    98dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    98e0:	00800074 	movhi	r2,1
    98e4:	10ab0604 	addi	r2,r2,-21480
    98e8:	10800017 	ldw	r2,0(r2)
    98ec:	10000526 	beq	r2,zero,9904 <alt_get_errno+0x34>
    98f0:	00800074 	movhi	r2,1
    98f4:	10ab0604 	addi	r2,r2,-21480
    98f8:	10800017 	ldw	r2,0(r2)
    98fc:	103ee83a 	callr	r2
    9900:	00000206 	br	990c <alt_get_errno+0x3c>
    9904:	00800074 	movhi	r2,1
    9908:	10abcd04 	addi	r2,r2,-20684
}
    990c:	e037883a 	mov	sp,fp
    9910:	dfc00117 	ldw	ra,4(sp)
    9914:	df000017 	ldw	fp,0(sp)
    9918:	dec00204 	addi	sp,sp,8
    991c:	f800283a 	ret

00009920 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    9920:	defff804 	addi	sp,sp,-32
    9924:	dfc00715 	stw	ra,28(sp)
    9928:	df000615 	stw	fp,24(sp)
    992c:	df000604 	addi	fp,sp,24
    9930:	e13ffc15 	stw	r4,-16(fp)
    9934:	e17ffd15 	stw	r5,-12(fp)
    9938:	e1bffe15 	stw	r6,-8(fp)
    993c:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
    9940:	e0bfff17 	ldw	r2,-4(fp)
    9944:	1090000c 	andi	r2,r2,16384
    9948:	1005003a 	cmpeq	r2,r2,zero
    994c:	10803fcc 	andi	r2,r2,255
    9950:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    9954:	e0bffc17 	ldw	r2,-16(fp)
    9958:	10800017 	ldw	r2,0(r2)
    995c:	10800204 	addi	r2,r2,8
    9960:	10800037 	ldwio	r2,0(r2)
    9964:	e0bffb15 	stw	r2,-20(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
    9968:	e0bffc17 	ldw	r2,-16(fp)
    996c:	10800017 	ldw	r2,0(r2)
    9970:	10800204 	addi	r2,r2,8
    9974:	0007883a 	mov	r3,zero
    9978:	10c00035 	stwio	r3,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
    997c:	e0bffb17 	ldw	r2,-20(fp)
    9980:	1080200c 	andi	r2,r2,128
    9984:	10000b26 	beq	r2,zero,99b4 <altera_avalon_uart_read+0x94>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    9988:	e0bffc17 	ldw	r2,-16(fp)
    998c:	10800017 	ldw	r2,0(r2)
    9990:	10800037 	ldwio	r2,0(r2)
    9994:	1007883a 	mov	r3,r2
    9998:	e0bffd17 	ldw	r2,-12(fp)
    999c:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    99a0:	e0bffb17 	ldw	r2,-20(fp)
    99a4:	108000cc 	andi	r2,r2,3
    99a8:	1000021e 	bne	r2,zero,99b4 <altera_avalon_uart_read+0x94>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
    99ac:	00800044 	movi	r2,1
    99b0:	00000606 	br	99cc <altera_avalon_uart_read+0xac>
      }
    }
  }
  while (block);
    99b4:	e0bffa17 	ldw	r2,-24(fp)
    99b8:	103fe61e 	bne	r2,zero,9954 <altera_avalon_uart_read+0x34>

  ALT_ERRNO = EWOULDBLOCK;
    99bc:	00098d00 	call	98d0 <alt_get_errno>
    99c0:	00c002c4 	movi	r3,11
    99c4:	10c00015 	stw	r3,0(r2)
 
  return 0;
    99c8:	0005883a 	mov	r2,zero
}
    99cc:	e037883a 	mov	sp,fp
    99d0:	dfc00117 	ldw	ra,4(sp)
    99d4:	df000017 	ldw	fp,0(sp)
    99d8:	dec00204 	addi	sp,sp,8
    99dc:	f800283a 	ret

000099e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    99e0:	defffe04 	addi	sp,sp,-8
    99e4:	dfc00115 	stw	ra,4(sp)
    99e8:	df000015 	stw	fp,0(sp)
    99ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    99f0:	00800074 	movhi	r2,1
    99f4:	10ab0604 	addi	r2,r2,-21480
    99f8:	10800017 	ldw	r2,0(r2)
    99fc:	10000526 	beq	r2,zero,9a14 <alt_get_errno+0x34>
    9a00:	00800074 	movhi	r2,1
    9a04:	10ab0604 	addi	r2,r2,-21480
    9a08:	10800017 	ldw	r2,0(r2)
    9a0c:	103ee83a 	callr	r2
    9a10:	00000206 	br	9a1c <alt_get_errno+0x3c>
    9a14:	00800074 	movhi	r2,1
    9a18:	10abcd04 	addi	r2,r2,-20684
}
    9a1c:	e037883a 	mov	sp,fp
    9a20:	dfc00117 	ldw	ra,4(sp)
    9a24:	df000017 	ldw	fp,0(sp)
    9a28:	dec00204 	addi	sp,sp,8
    9a2c:	f800283a 	ret

00009a30 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    9a30:	defff704 	addi	sp,sp,-36
    9a34:	dfc00815 	stw	ra,32(sp)
    9a38:	df000715 	stw	fp,28(sp)
    9a3c:	df000704 	addi	fp,sp,28
    9a40:	e13ffc15 	stw	r4,-16(fp)
    9a44:	e17ffd15 	stw	r5,-12(fp)
    9a48:	e1bffe15 	stw	r6,-8(fp)
    9a4c:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    9a50:	e0bfff17 	ldw	r2,-4(fp)
    9a54:	1090000c 	andi	r2,r2,16384
    9a58:	1005003a 	cmpeq	r2,r2,zero
    9a5c:	10803fcc 	andi	r2,r2,255
    9a60:	e0bffa15 	stw	r2,-24(fp)
  count = len;
    9a64:	e0bffe17 	ldw	r2,-8(fp)
    9a68:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    9a6c:	e0bffc17 	ldw	r2,-16(fp)
    9a70:	10800017 	ldw	r2,0(r2)
    9a74:	10800204 	addi	r2,r2,8
    9a78:	10800037 	ldwio	r2,0(r2)
    9a7c:	e0bffb15 	stw	r2,-20(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    9a80:	e0bffb17 	ldw	r2,-20(fp)
    9a84:	1080100c 	andi	r2,r2,64
    9a88:	10000f26 	beq	r2,zero,9ac8 <altera_avalon_uart_write+0x98>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    9a8c:	e0bffc17 	ldw	r2,-16(fp)
    9a90:	10800017 	ldw	r2,0(r2)
    9a94:	10800104 	addi	r2,r2,4
    9a98:	e0fffd17 	ldw	r3,-12(fp)
    9a9c:	18c00003 	ldbu	r3,0(r3)
    9aa0:	18c03fcc 	andi	r3,r3,255
    9aa4:	18c0201c 	xori	r3,r3,128
    9aa8:	18ffe004 	addi	r3,r3,-128
    9aac:	e13ffd17 	ldw	r4,-12(fp)
    9ab0:	21000044 	addi	r4,r4,1
    9ab4:	e13ffd15 	stw	r4,-12(fp)
    9ab8:	10c00035 	stwio	r3,0(r2)
      count--;
    9abc:	e0bff917 	ldw	r2,-28(fp)
    9ac0:	10bfffc4 	addi	r2,r2,-1
    9ac4:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
    9ac8:	e0bffa17 	ldw	r2,-24(fp)
    9acc:	10000226 	beq	r2,zero,9ad8 <altera_avalon_uart_write+0xa8>
    9ad0:	e0bff917 	ldw	r2,-28(fp)
    9ad4:	103fe51e 	bne	r2,zero,9a6c <altera_avalon_uart_write+0x3c>

  if (count)
    9ad8:	e0bff917 	ldw	r2,-28(fp)
    9adc:	10000326 	beq	r2,zero,9aec <altera_avalon_uart_write+0xbc>
  {
    ALT_ERRNO = EWOULDBLOCK;
    9ae0:	00099e00 	call	99e0 <alt_get_errno>
    9ae4:	00c002c4 	movi	r3,11
    9ae8:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
    9aec:	e0fffe17 	ldw	r3,-8(fp)
    9af0:	e0bff917 	ldw	r2,-28(fp)
    9af4:	1885c83a 	sub	r2,r3,r2
}
    9af8:	e037883a 	mov	sp,fp
    9afc:	dfc00117 	ldw	ra,4(sp)
    9b00:	df000017 	ldw	fp,0(sp)
    9b04:	dec00204 	addi	sp,sp,8
    9b08:	f800283a 	ret

00009b0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9b0c:	defffe04 	addi	sp,sp,-8
    9b10:	dfc00115 	stw	ra,4(sp)
    9b14:	df000015 	stw	fp,0(sp)
    9b18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9b1c:	00800074 	movhi	r2,1
    9b20:	10ab0604 	addi	r2,r2,-21480
    9b24:	10800017 	ldw	r2,0(r2)
    9b28:	10000526 	beq	r2,zero,9b40 <alt_get_errno+0x34>
    9b2c:	00800074 	movhi	r2,1
    9b30:	10ab0604 	addi	r2,r2,-21480
    9b34:	10800017 	ldw	r2,0(r2)
    9b38:	103ee83a 	callr	r2
    9b3c:	00000206 	br	9b48 <alt_get_errno+0x3c>
    9b40:	00800074 	movhi	r2,1
    9b44:	10abcd04 	addi	r2,r2,-20684
}
    9b48:	e037883a 	mov	sp,fp
    9b4c:	dfc00117 	ldw	ra,4(sp)
    9b50:	df000017 	ldw	fp,0(sp)
    9b54:	dec00204 	addi	sp,sp,8
    9b58:	f800283a 	ret

00009b5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9b5c:	defffb04 	addi	sp,sp,-20
    9b60:	dfc00415 	stw	ra,16(sp)
    9b64:	df000315 	stw	fp,12(sp)
    9b68:	df000304 	addi	fp,sp,12
    9b6c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9b70:	e0bfff17 	ldw	r2,-4(fp)
    9b74:	10000616 	blt	r2,zero,9b90 <close+0x34>
    9b78:	e0bfff17 	ldw	r2,-4(fp)
    9b7c:	10c00324 	muli	r3,r2,12
    9b80:	00800074 	movhi	r2,1
    9b84:	10aa9f04 	addi	r2,r2,-21892
    9b88:	1885883a 	add	r2,r3,r2
    9b8c:	00000106 	br	9b94 <close+0x38>
    9b90:	0005883a 	mov	r2,zero
    9b94:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9b98:	e0bffd17 	ldw	r2,-12(fp)
    9b9c:	10001826 	beq	r2,zero,9c00 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9ba0:	e0bffd17 	ldw	r2,-12(fp)
    9ba4:	10800017 	ldw	r2,0(r2)
    9ba8:	10800417 	ldw	r2,16(r2)
    9bac:	10000626 	beq	r2,zero,9bc8 <close+0x6c>
    9bb0:	e0bffd17 	ldw	r2,-12(fp)
    9bb4:	10800017 	ldw	r2,0(r2)
    9bb8:	10800417 	ldw	r2,16(r2)
    9bbc:	e13ffd17 	ldw	r4,-12(fp)
    9bc0:	103ee83a 	callr	r2
    9bc4:	00000106 	br	9bcc <close+0x70>
    9bc8:	0005883a 	mov	r2,zero
    9bcc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9bd0:	e13fff17 	ldw	r4,-4(fp)
    9bd4:	00092680 	call	9268 <alt_release_fd>
    if (rval < 0)
    9bd8:	e0bffe17 	ldw	r2,-8(fp)
    9bdc:	1000060e 	bge	r2,zero,9bf8 <close+0x9c>
    {
      ALT_ERRNO = -rval;
    9be0:	0009b0c0 	call	9b0c <alt_get_errno>
    9be4:	e0fffe17 	ldw	r3,-8(fp)
    9be8:	00c7c83a 	sub	r3,zero,r3
    9bec:	10c00015 	stw	r3,0(r2)
      return -1;
    9bf0:	00bfffc4 	movi	r2,-1
    9bf4:	00000606 	br	9c10 <close+0xb4>
    }
    return 0;
    9bf8:	0005883a 	mov	r2,zero
    9bfc:	00000406 	br	9c10 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9c00:	0009b0c0 	call	9b0c <alt_get_errno>
    9c04:	00c01444 	movi	r3,81
    9c08:	10c00015 	stw	r3,0(r2)
    return -1;
    9c0c:	00bfffc4 	movi	r2,-1
  }
}
    9c10:	e037883a 	mov	sp,fp
    9c14:	dfc00117 	ldw	ra,4(sp)
    9c18:	df000017 	ldw	fp,0(sp)
    9c1c:	dec00204 	addi	sp,sp,8
    9c20:	f800283a 	ret

00009c24 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9c24:	deffff04 	addi	sp,sp,-4
    9c28:	df000015 	stw	fp,0(sp)
    9c2c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9c30:	e037883a 	mov	sp,fp
    9c34:	df000017 	ldw	fp,0(sp)
    9c38:	dec00104 	addi	sp,sp,4
    9c3c:	f800283a 	ret

00009c40 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9c40:	defffc04 	addi	sp,sp,-16
    9c44:	df000315 	stw	fp,12(sp)
    9c48:	df000304 	addi	fp,sp,12
    9c4c:	e13ffd15 	stw	r4,-12(fp)
    9c50:	e17ffe15 	stw	r5,-8(fp)
    9c54:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9c58:	e0bfff17 	ldw	r2,-4(fp)
}
    9c5c:	e037883a 	mov	sp,fp
    9c60:	df000017 	ldw	fp,0(sp)
    9c64:	dec00104 	addi	sp,sp,4
    9c68:	f800283a 	ret

00009c6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9c6c:	defffe04 	addi	sp,sp,-8
    9c70:	dfc00115 	stw	ra,4(sp)
    9c74:	df000015 	stw	fp,0(sp)
    9c78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9c7c:	00800074 	movhi	r2,1
    9c80:	10ab0604 	addi	r2,r2,-21480
    9c84:	10800017 	ldw	r2,0(r2)
    9c88:	10000526 	beq	r2,zero,9ca0 <alt_get_errno+0x34>
    9c8c:	00800074 	movhi	r2,1
    9c90:	10ab0604 	addi	r2,r2,-21480
    9c94:	10800017 	ldw	r2,0(r2)
    9c98:	103ee83a 	callr	r2
    9c9c:	00000206 	br	9ca8 <alt_get_errno+0x3c>
    9ca0:	00800074 	movhi	r2,1
    9ca4:	10abcd04 	addi	r2,r2,-20684
}
    9ca8:	e037883a 	mov	sp,fp
    9cac:	dfc00117 	ldw	ra,4(sp)
    9cb0:	df000017 	ldw	fp,0(sp)
    9cb4:	dec00204 	addi	sp,sp,8
    9cb8:	f800283a 	ret

00009cbc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9cbc:	defffa04 	addi	sp,sp,-24
    9cc0:	dfc00515 	stw	ra,20(sp)
    9cc4:	df000415 	stw	fp,16(sp)
    9cc8:	df000404 	addi	fp,sp,16
    9ccc:	e13ffe15 	stw	r4,-8(fp)
    9cd0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9cd4:	e0bffe17 	ldw	r2,-8(fp)
    9cd8:	10000326 	beq	r2,zero,9ce8 <alt_dev_llist_insert+0x2c>
    9cdc:	e0bffe17 	ldw	r2,-8(fp)
    9ce0:	10800217 	ldw	r2,8(r2)
    9ce4:	1000051e 	bne	r2,zero,9cfc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    9ce8:	0009c6c0 	call	9c6c <alt_get_errno>
    9cec:	00c00584 	movi	r3,22
    9cf0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    9cf4:	00bffa84 	movi	r2,-22
    9cf8:	00001306 	br	9d48 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    9cfc:	e0bffe17 	ldw	r2,-8(fp)
    9d00:	e0ffff17 	ldw	r3,-4(fp)
    9d04:	e0fffc15 	stw	r3,-16(fp)
    9d08:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9d0c:	e0bffd17 	ldw	r2,-12(fp)
    9d10:	e0fffc17 	ldw	r3,-16(fp)
    9d14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    9d18:	e0bffc17 	ldw	r2,-16(fp)
    9d1c:	10c00017 	ldw	r3,0(r2)
    9d20:	e0bffd17 	ldw	r2,-12(fp)
    9d24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    9d28:	e0bffc17 	ldw	r2,-16(fp)
    9d2c:	10800017 	ldw	r2,0(r2)
    9d30:	e0fffd17 	ldw	r3,-12(fp)
    9d34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9d38:	e0bffc17 	ldw	r2,-16(fp)
    9d3c:	e0fffd17 	ldw	r3,-12(fp)
    9d40:	10c00015 	stw	r3,0(r2)

  return 0;  
    9d44:	0005883a 	mov	r2,zero
}
    9d48:	e037883a 	mov	sp,fp
    9d4c:	dfc00117 	ldw	ra,4(sp)
    9d50:	df000017 	ldw	fp,0(sp)
    9d54:	dec00204 	addi	sp,sp,8
    9d58:	f800283a 	ret

00009d5c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9d5c:	defffa04 	addi	sp,sp,-24
    9d60:	dfc00515 	stw	ra,20(sp)
    9d64:	df000415 	stw	fp,16(sp)
    9d68:	df000404 	addi	fp,sp,16
    9d6c:	e13ffe15 	stw	r4,-8(fp)
    9d70:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9d74:	e0bfff17 	ldw	r2,-4(fp)
    9d78:	10800017 	ldw	r2,0(r2)
    9d7c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9d80:	e13ffe17 	ldw	r4,-8(fp)
    9d84:	00083d80 	call	83d8 <strlen>
    9d88:	10800044 	addi	r2,r2,1
    9d8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9d90:	00000d06 	br	9dc8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9d94:	e0bffc17 	ldw	r2,-16(fp)
    9d98:	10c00217 	ldw	r3,8(r2)
    9d9c:	e0bffd17 	ldw	r2,-12(fp)
    9da0:	1809883a 	mov	r4,r3
    9da4:	e17ffe17 	ldw	r5,-8(fp)
    9da8:	100d883a 	mov	r6,r2
    9dac:	000a64c0 	call	a64c <memcmp>
    9db0:	1000021e 	bne	r2,zero,9dbc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9db4:	e0bffc17 	ldw	r2,-16(fp)
    9db8:	00000706 	br	9dd8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9dbc:	e0bffc17 	ldw	r2,-16(fp)
    9dc0:	10800017 	ldw	r2,0(r2)
    9dc4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9dc8:	e0fffc17 	ldw	r3,-16(fp)
    9dcc:	e0bfff17 	ldw	r2,-4(fp)
    9dd0:	18bff01e 	bne	r3,r2,9d94 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9dd4:	0005883a 	mov	r2,zero
}
    9dd8:	e037883a 	mov	sp,fp
    9ddc:	dfc00117 	ldw	ra,4(sp)
    9de0:	df000017 	ldw	fp,0(sp)
    9de4:	dec00204 	addi	sp,sp,8
    9de8:	f800283a 	ret

00009dec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9dec:	defffb04 	addi	sp,sp,-20
    9df0:	dfc00415 	stw	ra,16(sp)
    9df4:	df000315 	stw	fp,12(sp)
    9df8:	df000304 	addi	fp,sp,12
    9dfc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9e00:	00800074 	movhi	r2,1
    9e04:	10ab0104 	addi	r2,r2,-21500
    9e08:	10800017 	ldw	r2,0(r2)
    9e0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9e10:	00003106 	br	9ed8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    9e14:	e0bffd17 	ldw	r2,-12(fp)
    9e18:	10800217 	ldw	r2,8(r2)
    9e1c:	1009883a 	mov	r4,r2
    9e20:	00083d80 	call	83d8 <strlen>
    9e24:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9e28:	e0bffd17 	ldw	r2,-12(fp)
    9e2c:	10c00217 	ldw	r3,8(r2)
    9e30:	e0bffe17 	ldw	r2,-8(fp)
    9e34:	10bfffc4 	addi	r2,r2,-1
    9e38:	1885883a 	add	r2,r3,r2
    9e3c:	10800003 	ldbu	r2,0(r2)
    9e40:	10803fcc 	andi	r2,r2,255
    9e44:	1080201c 	xori	r2,r2,128
    9e48:	10bfe004 	addi	r2,r2,-128
    9e4c:	10800bd8 	cmpnei	r2,r2,47
    9e50:	1000031e 	bne	r2,zero,9e60 <alt_find_file+0x74>
    {
      len -= 1;
    9e54:	e0bffe17 	ldw	r2,-8(fp)
    9e58:	10bfffc4 	addi	r2,r2,-1
    9e5c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9e60:	e0bffe17 	ldw	r2,-8(fp)
    9e64:	e0ffff17 	ldw	r3,-4(fp)
    9e68:	1885883a 	add	r2,r3,r2
    9e6c:	10800003 	ldbu	r2,0(r2)
    9e70:	10803fcc 	andi	r2,r2,255
    9e74:	1080201c 	xori	r2,r2,128
    9e78:	10bfe004 	addi	r2,r2,-128
    9e7c:	10800be0 	cmpeqi	r2,r2,47
    9e80:	1000081e 	bne	r2,zero,9ea4 <alt_find_file+0xb8>
    9e84:	e0bffe17 	ldw	r2,-8(fp)
    9e88:	e0ffff17 	ldw	r3,-4(fp)
    9e8c:	1885883a 	add	r2,r3,r2
    9e90:	10800003 	ldbu	r2,0(r2)
    9e94:	10803fcc 	andi	r2,r2,255
    9e98:	1080201c 	xori	r2,r2,128
    9e9c:	10bfe004 	addi	r2,r2,-128
    9ea0:	10000a1e 	bne	r2,zero,9ecc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    9ea4:	e0bffd17 	ldw	r2,-12(fp)
    9ea8:	10c00217 	ldw	r3,8(r2)
    9eac:	e0bffe17 	ldw	r2,-8(fp)
    9eb0:	1809883a 	mov	r4,r3
    9eb4:	e17fff17 	ldw	r5,-4(fp)
    9eb8:	100d883a 	mov	r6,r2
    9ebc:	000a64c0 	call	a64c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    9ec0:	1000021e 	bne	r2,zero,9ecc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    9ec4:	e0bffd17 	ldw	r2,-12(fp)
    9ec8:	00000806 	br	9eec <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    9ecc:	e0bffd17 	ldw	r2,-12(fp)
    9ed0:	10800017 	ldw	r2,0(r2)
    9ed4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9ed8:	e0fffd17 	ldw	r3,-12(fp)
    9edc:	00800074 	movhi	r2,1
    9ee0:	10ab0104 	addi	r2,r2,-21500
    9ee4:	18bfcb1e 	bne	r3,r2,9e14 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    9ee8:	0005883a 	mov	r2,zero
}
    9eec:	e037883a 	mov	sp,fp
    9ef0:	dfc00117 	ldw	ra,4(sp)
    9ef4:	df000017 	ldw	fp,0(sp)
    9ef8:	dec00204 	addi	sp,sp,8
    9efc:	f800283a 	ret

00009f00 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    9f00:	defffc04 	addi	sp,sp,-16
    9f04:	df000315 	stw	fp,12(sp)
    9f08:	df000304 	addi	fp,sp,12
    9f0c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    9f10:	00bffa04 	movi	r2,-24
    9f14:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9f18:	e03ffd15 	stw	zero,-12(fp)
    9f1c:	00001d06 	br	9f94 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    9f20:	00c00074 	movhi	r3,1
    9f24:	18ea9f04 	addi	r3,r3,-21892
    9f28:	e0bffd17 	ldw	r2,-12(fp)
    9f2c:	10800324 	muli	r2,r2,12
    9f30:	1885883a 	add	r2,r3,r2
    9f34:	10800017 	ldw	r2,0(r2)
    9f38:	1000131e 	bne	r2,zero,9f88 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    9f3c:	00c00074 	movhi	r3,1
    9f40:	18ea9f04 	addi	r3,r3,-21892
    9f44:	e0bffd17 	ldw	r2,-12(fp)
    9f48:	10800324 	muli	r2,r2,12
    9f4c:	1885883a 	add	r2,r3,r2
    9f50:	e0ffff17 	ldw	r3,-4(fp)
    9f54:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    9f58:	00800074 	movhi	r2,1
    9f5c:	10ab0504 	addi	r2,r2,-21484
    9f60:	10c00017 	ldw	r3,0(r2)
    9f64:	e0bffd17 	ldw	r2,-12(fp)
    9f68:	1880040e 	bge	r3,r2,9f7c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    9f6c:	00800074 	movhi	r2,1
    9f70:	10ab0504 	addi	r2,r2,-21484
    9f74:	e0fffd17 	ldw	r3,-12(fp)
    9f78:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    9f7c:	e0bffd17 	ldw	r2,-12(fp)
    9f80:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    9f84:	00000606 	br	9fa0 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    9f88:	e0bffd17 	ldw	r2,-12(fp)
    9f8c:	10800044 	addi	r2,r2,1
    9f90:	e0bffd15 	stw	r2,-12(fp)
    9f94:	e0bffd17 	ldw	r2,-12(fp)
    9f98:	10800810 	cmplti	r2,r2,32
    9f9c:	103fe01e 	bne	r2,zero,9f20 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    9fa0:	e0bffe17 	ldw	r2,-8(fp)
}
    9fa4:	e037883a 	mov	sp,fp
    9fa8:	df000017 	ldw	fp,0(sp)
    9fac:	dec00104 	addi	sp,sp,4
    9fb0:	f800283a 	ret

00009fb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9fb4:	defffe04 	addi	sp,sp,-8
    9fb8:	dfc00115 	stw	ra,4(sp)
    9fbc:	df000015 	stw	fp,0(sp)
    9fc0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9fc4:	0009883a 	mov	r4,zero
    9fc8:	01420004 	movi	r5,2048
    9fcc:	000a5a00 	call	a5a0 <alt_icache_flush>
#endif
}
    9fd0:	e037883a 	mov	sp,fp
    9fd4:	dfc00117 	ldw	ra,4(sp)
    9fd8:	df000017 	ldw	fp,0(sp)
    9fdc:	dec00204 	addi	sp,sp,8
    9fe0:	f800283a 	ret

00009fe4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9fe4:	defff904 	addi	sp,sp,-28
    9fe8:	dfc00615 	stw	ra,24(sp)
    9fec:	df000515 	stw	fp,20(sp)
    9ff0:	df000504 	addi	fp,sp,20
    9ff4:	e13ffc15 	stw	r4,-16(fp)
    9ff8:	e17ffd15 	stw	r5,-12(fp)
    9ffc:	e1bffe15 	stw	r6,-8(fp)
    a000:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    a004:	e0800217 	ldw	r2,8(fp)
    a008:	d8800015 	stw	r2,0(sp)
    a00c:	e13ffc17 	ldw	r4,-16(fp)
    a010:	e17ffd17 	ldw	r5,-12(fp)
    a014:	e1bffe17 	ldw	r6,-8(fp)
    a018:	e1ffff17 	ldw	r7,-4(fp)
    a01c:	000a1bc0 	call	a1bc <alt_iic_isr_register>
}  
    a020:	e037883a 	mov	sp,fp
    a024:	dfc00117 	ldw	ra,4(sp)
    a028:	df000017 	ldw	fp,0(sp)
    a02c:	dec00204 	addi	sp,sp,8
    a030:	f800283a 	ret

0000a034 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    a034:	defff904 	addi	sp,sp,-28
    a038:	df000615 	stw	fp,24(sp)
    a03c:	df000604 	addi	fp,sp,24
    a040:	e13ffe15 	stw	r4,-8(fp)
    a044:	e17fff15 	stw	r5,-4(fp)
    a048:	e0bfff17 	ldw	r2,-4(fp)
    a04c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a050:	0005303a 	rdctl	r2,status
    a054:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a058:	e0fffb17 	ldw	r3,-20(fp)
    a05c:	00bfff84 	movi	r2,-2
    a060:	1884703a 	and	r2,r3,r2
    a064:	1001703a 	wrctl	status,r2
  
  return context;
    a068:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a06c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    a070:	e0bffa17 	ldw	r2,-24(fp)
    a074:	00c00044 	movi	r3,1
    a078:	1884983a 	sll	r2,r3,r2
    a07c:	1007883a 	mov	r3,r2
    a080:	00800074 	movhi	r2,1
    a084:	10abd104 	addi	r2,r2,-20668
    a088:	10800017 	ldw	r2,0(r2)
    a08c:	1886b03a 	or	r3,r3,r2
    a090:	00800074 	movhi	r2,1
    a094:	10abd104 	addi	r2,r2,-20668
    a098:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a09c:	00800074 	movhi	r2,1
    a0a0:	10abd104 	addi	r2,r2,-20668
    a0a4:	10800017 	ldw	r2,0(r2)
    a0a8:	100170fa 	wrctl	ienable,r2
    a0ac:	e0bffc17 	ldw	r2,-16(fp)
    a0b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a0b4:	e0bffd17 	ldw	r2,-12(fp)
    a0b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a0bc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    a0c0:	e037883a 	mov	sp,fp
    a0c4:	df000017 	ldw	fp,0(sp)
    a0c8:	dec00104 	addi	sp,sp,4
    a0cc:	f800283a 	ret

0000a0d0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    a0d0:	defff904 	addi	sp,sp,-28
    a0d4:	df000615 	stw	fp,24(sp)
    a0d8:	df000604 	addi	fp,sp,24
    a0dc:	e13ffe15 	stw	r4,-8(fp)
    a0e0:	e17fff15 	stw	r5,-4(fp)
    a0e4:	e0bfff17 	ldw	r2,-4(fp)
    a0e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a0ec:	0005303a 	rdctl	r2,status
    a0f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a0f4:	e0fffb17 	ldw	r3,-20(fp)
    a0f8:	00bfff84 	movi	r2,-2
    a0fc:	1884703a 	and	r2,r3,r2
    a100:	1001703a 	wrctl	status,r2
  
  return context;
    a104:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a108:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    a10c:	e0bffa17 	ldw	r2,-24(fp)
    a110:	00c00044 	movi	r3,1
    a114:	1884983a 	sll	r2,r3,r2
    a118:	0084303a 	nor	r2,zero,r2
    a11c:	1007883a 	mov	r3,r2
    a120:	00800074 	movhi	r2,1
    a124:	10abd104 	addi	r2,r2,-20668
    a128:	10800017 	ldw	r2,0(r2)
    a12c:	1886703a 	and	r3,r3,r2
    a130:	00800074 	movhi	r2,1
    a134:	10abd104 	addi	r2,r2,-20668
    a138:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a13c:	00800074 	movhi	r2,1
    a140:	10abd104 	addi	r2,r2,-20668
    a144:	10800017 	ldw	r2,0(r2)
    a148:	100170fa 	wrctl	ienable,r2
    a14c:	e0bffc17 	ldw	r2,-16(fp)
    a150:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a154:	e0bffd17 	ldw	r2,-12(fp)
    a158:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a15c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    a160:	e037883a 	mov	sp,fp
    a164:	df000017 	ldw	fp,0(sp)
    a168:	dec00104 	addi	sp,sp,4
    a16c:	f800283a 	ret

0000a170 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a170:	defffc04 	addi	sp,sp,-16
    a174:	df000315 	stw	fp,12(sp)
    a178:	df000304 	addi	fp,sp,12
    a17c:	e13ffe15 	stw	r4,-8(fp)
    a180:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a184:	000530fa 	rdctl	r2,ienable
    a188:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a18c:	e0bfff17 	ldw	r2,-4(fp)
    a190:	00c00044 	movi	r3,1
    a194:	1884983a 	sll	r2,r3,r2
    a198:	1007883a 	mov	r3,r2
    a19c:	e0bffd17 	ldw	r2,-12(fp)
    a1a0:	1884703a 	and	r2,r3,r2
    a1a4:	1004c03a 	cmpne	r2,r2,zero
    a1a8:	10803fcc 	andi	r2,r2,255
}
    a1ac:	e037883a 	mov	sp,fp
    a1b0:	df000017 	ldw	fp,0(sp)
    a1b4:	dec00104 	addi	sp,sp,4
    a1b8:	f800283a 	ret

0000a1bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a1bc:	defff504 	addi	sp,sp,-44
    a1c0:	dfc00a15 	stw	ra,40(sp)
    a1c4:	df000915 	stw	fp,36(sp)
    a1c8:	df000904 	addi	fp,sp,36
    a1cc:	e13ffc15 	stw	r4,-16(fp)
    a1d0:	e17ffd15 	stw	r5,-12(fp)
    a1d4:	e1bffe15 	stw	r6,-8(fp)
    a1d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    a1dc:	00bffa84 	movi	r2,-22
    a1e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a1e4:	e0bffd17 	ldw	r2,-12(fp)
    a1e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a1ec:	e0bff817 	ldw	r2,-32(fp)
    a1f0:	10800808 	cmpgei	r2,r2,32
    a1f4:	1000271e 	bne	r2,zero,a294 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a1f8:	0005303a 	rdctl	r2,status
    a1fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a200:	e0fffa17 	ldw	r3,-24(fp)
    a204:	00bfff84 	movi	r2,-2
    a208:	1884703a 	and	r2,r3,r2
    a20c:	1001703a 	wrctl	status,r2
  
  return context;
    a210:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a214:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    a218:	00c00074 	movhi	r3,1
    a21c:	18ebd404 	addi	r3,r3,-20656
    a220:	e0bff817 	ldw	r2,-32(fp)
    a224:	100490fa 	slli	r2,r2,3
    a228:	1885883a 	add	r2,r3,r2
    a22c:	e0fffe17 	ldw	r3,-8(fp)
    a230:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    a234:	00c00074 	movhi	r3,1
    a238:	18ebd404 	addi	r3,r3,-20656
    a23c:	e0bff817 	ldw	r2,-32(fp)
    a240:	100490fa 	slli	r2,r2,3
    a244:	1885883a 	add	r2,r3,r2
    a248:	10800104 	addi	r2,r2,4
    a24c:	e0ffff17 	ldw	r3,-4(fp)
    a250:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a254:	e0bffe17 	ldw	r2,-8(fp)
    a258:	10000526 	beq	r2,zero,a270 <alt_iic_isr_register+0xb4>
    a25c:	e0bff817 	ldw	r2,-32(fp)
    a260:	e13ffc17 	ldw	r4,-16(fp)
    a264:	100b883a 	mov	r5,r2
    a268:	000a0340 	call	a034 <alt_ic_irq_enable>
    a26c:	00000406 	br	a280 <alt_iic_isr_register+0xc4>
    a270:	e0bff817 	ldw	r2,-32(fp)
    a274:	e13ffc17 	ldw	r4,-16(fp)
    a278:	100b883a 	mov	r5,r2
    a27c:	000a0d00 	call	a0d0 <alt_ic_irq_disable>
    a280:	e0bff715 	stw	r2,-36(fp)
    a284:	e0bff917 	ldw	r2,-28(fp)
    a288:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a28c:	e0bffb17 	ldw	r2,-20(fp)
    a290:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    a294:	e0bff717 	ldw	r2,-36(fp)
}
    a298:	e037883a 	mov	sp,fp
    a29c:	dfc00117 	ldw	ra,4(sp)
    a2a0:	df000017 	ldw	fp,0(sp)
    a2a4:	dec00204 	addi	sp,sp,8
    a2a8:	f800283a 	ret

0000a2ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    a2ac:	defff904 	addi	sp,sp,-28
    a2b0:	dfc00615 	stw	ra,24(sp)
    a2b4:	df000515 	stw	fp,20(sp)
    a2b8:	df000504 	addi	fp,sp,20
    a2bc:	e13ffc15 	stw	r4,-16(fp)
    a2c0:	e17ffd15 	stw	r5,-12(fp)
    a2c4:	e1bffe15 	stw	r6,-8(fp)
    a2c8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    a2cc:	e13ffd17 	ldw	r4,-12(fp)
    a2d0:	e17ffe17 	ldw	r5,-8(fp)
    a2d4:	e1bfff17 	ldw	r6,-4(fp)
    a2d8:	0008fd40 	call	8fd4 <open>
    a2dc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    a2e0:	e0bffb17 	ldw	r2,-20(fp)
    a2e4:	10001c16 	blt	r2,zero,a358 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    a2e8:	00c00074 	movhi	r3,1
    a2ec:	18ea9f04 	addi	r3,r3,-21892
    a2f0:	e0bffb17 	ldw	r2,-20(fp)
    a2f4:	10800324 	muli	r2,r2,12
    a2f8:	1885883a 	add	r2,r3,r2
    a2fc:	10c00017 	ldw	r3,0(r2)
    a300:	e0bffc17 	ldw	r2,-16(fp)
    a304:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    a308:	00c00074 	movhi	r3,1
    a30c:	18ea9f04 	addi	r3,r3,-21892
    a310:	e0bffb17 	ldw	r2,-20(fp)
    a314:	10800324 	muli	r2,r2,12
    a318:	1885883a 	add	r2,r3,r2
    a31c:	10800104 	addi	r2,r2,4
    a320:	10c00017 	ldw	r3,0(r2)
    a324:	e0bffc17 	ldw	r2,-16(fp)
    a328:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    a32c:	00c00074 	movhi	r3,1
    a330:	18ea9f04 	addi	r3,r3,-21892
    a334:	e0bffb17 	ldw	r2,-20(fp)
    a338:	10800324 	muli	r2,r2,12
    a33c:	1885883a 	add	r2,r3,r2
    a340:	10800204 	addi	r2,r2,8
    a344:	10c00017 	ldw	r3,0(r2)
    a348:	e0bffc17 	ldw	r2,-16(fp)
    a34c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    a350:	e13ffb17 	ldw	r4,-20(fp)
    a354:	00092680 	call	9268 <alt_release_fd>
  }
} 
    a358:	e037883a 	mov	sp,fp
    a35c:	dfc00117 	ldw	ra,4(sp)
    a360:	df000017 	ldw	fp,0(sp)
    a364:	dec00204 	addi	sp,sp,8
    a368:	f800283a 	ret

0000a36c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    a36c:	defffb04 	addi	sp,sp,-20
    a370:	dfc00415 	stw	ra,16(sp)
    a374:	df000315 	stw	fp,12(sp)
    a378:	df000304 	addi	fp,sp,12
    a37c:	e13ffd15 	stw	r4,-12(fp)
    a380:	e17ffe15 	stw	r5,-8(fp)
    a384:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    a388:	01000074 	movhi	r4,1
    a38c:	212aa204 	addi	r4,r4,-21880
    a390:	e17ffd17 	ldw	r5,-12(fp)
    a394:	01800044 	movi	r6,1
    a398:	01c07fc4 	movi	r7,511
    a39c:	000a2ac0 	call	a2ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    a3a0:	01000074 	movhi	r4,1
    a3a4:	212a9f04 	addi	r4,r4,-21892
    a3a8:	e17ffe17 	ldw	r5,-8(fp)
    a3ac:	000d883a 	mov	r6,zero
    a3b0:	01c07fc4 	movi	r7,511
    a3b4:	000a2ac0 	call	a2ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    a3b8:	01000074 	movhi	r4,1
    a3bc:	212aa504 	addi	r4,r4,-21868
    a3c0:	e17fff17 	ldw	r5,-4(fp)
    a3c4:	01800044 	movi	r6,1
    a3c8:	01c07fc4 	movi	r7,511
    a3cc:	000a2ac0 	call	a2ac <alt_open_fd>
}  
    a3d0:	e037883a 	mov	sp,fp
    a3d4:	dfc00117 	ldw	ra,4(sp)
    a3d8:	df000017 	ldw	fp,0(sp)
    a3dc:	dec00204 	addi	sp,sp,8
    a3e0:	f800283a 	ret

0000a3e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a3e4:	defffa04 	addi	sp,sp,-24
    a3e8:	df000515 	stw	fp,20(sp)
    a3ec:	df000504 	addi	fp,sp,20
    a3f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a3f4:	0005303a 	rdctl	r2,status
    a3f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a3fc:	e0fffc17 	ldw	r3,-16(fp)
    a400:	00bfff84 	movi	r2,-2
    a404:	1884703a 	and	r2,r3,r2
    a408:	1001703a 	wrctl	status,r2
  
  return context;
    a40c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a410:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a414:	e0bfff17 	ldw	r2,-4(fp)
    a418:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a41c:	e0bffd17 	ldw	r2,-12(fp)
    a420:	10800017 	ldw	r2,0(r2)
    a424:	e0fffd17 	ldw	r3,-12(fp)
    a428:	18c00117 	ldw	r3,4(r3)
    a42c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a430:	e0bffd17 	ldw	r2,-12(fp)
    a434:	10800117 	ldw	r2,4(r2)
    a438:	e0fffd17 	ldw	r3,-12(fp)
    a43c:	18c00017 	ldw	r3,0(r3)
    a440:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a444:	e0bffd17 	ldw	r2,-12(fp)
    a448:	e0fffd17 	ldw	r3,-12(fp)
    a44c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a450:	e0bffd17 	ldw	r2,-12(fp)
    a454:	e0fffd17 	ldw	r3,-12(fp)
    a458:	10c00015 	stw	r3,0(r2)
    a45c:	e0bffb17 	ldw	r2,-20(fp)
    a460:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a464:	e0bffe17 	ldw	r2,-8(fp)
    a468:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a46c:	e037883a 	mov	sp,fp
    a470:	df000017 	ldw	fp,0(sp)
    a474:	dec00104 	addi	sp,sp,4
    a478:	f800283a 	ret

0000a47c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a47c:	defffb04 	addi	sp,sp,-20
    a480:	dfc00415 	stw	ra,16(sp)
    a484:	df000315 	stw	fp,12(sp)
    a488:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a48c:	d0a00917 	ldw	r2,-32732(gp)
    a490:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a494:	d0a0d417 	ldw	r2,-31920(gp)
    a498:	10800044 	addi	r2,r2,1
    a49c:	d0a0d415 	stw	r2,-31920(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a4a0:	00002e06 	br	a55c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a4a4:	e0bffd17 	ldw	r2,-12(fp)
    a4a8:	10800017 	ldw	r2,0(r2)
    a4ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a4b0:	e0bffd17 	ldw	r2,-12(fp)
    a4b4:	10800403 	ldbu	r2,16(r2)
    a4b8:	10803fcc 	andi	r2,r2,255
    a4bc:	10000426 	beq	r2,zero,a4d0 <alt_tick+0x54>
    a4c0:	d0a0d417 	ldw	r2,-31920(gp)
    a4c4:	1000021e 	bne	r2,zero,a4d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a4c8:	e0bffd17 	ldw	r2,-12(fp)
    a4cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a4d0:	e0bffd17 	ldw	r2,-12(fp)
    a4d4:	10800217 	ldw	r2,8(r2)
    a4d8:	d0e0d417 	ldw	r3,-31920(gp)
    a4dc:	18801d36 	bltu	r3,r2,a554 <alt_tick+0xd8>
    a4e0:	e0bffd17 	ldw	r2,-12(fp)
    a4e4:	10800403 	ldbu	r2,16(r2)
    a4e8:	10803fcc 	andi	r2,r2,255
    a4ec:	1000191e 	bne	r2,zero,a554 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a4f0:	e0bffd17 	ldw	r2,-12(fp)
    a4f4:	10c00317 	ldw	r3,12(r2)
    a4f8:	e0bffd17 	ldw	r2,-12(fp)
    a4fc:	10800517 	ldw	r2,20(r2)
    a500:	1009883a 	mov	r4,r2
    a504:	183ee83a 	callr	r3
    a508:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a50c:	e0bfff17 	ldw	r2,-4(fp)
    a510:	1000031e 	bne	r2,zero,a520 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a514:	e13ffd17 	ldw	r4,-12(fp)
    a518:	000a3e40 	call	a3e4 <alt_alarm_stop>
    a51c:	00000d06 	br	a554 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a520:	e0bffd17 	ldw	r2,-12(fp)
    a524:	10c00217 	ldw	r3,8(r2)
    a528:	e0bfff17 	ldw	r2,-4(fp)
    a52c:	1887883a 	add	r3,r3,r2
    a530:	e0bffd17 	ldw	r2,-12(fp)
    a534:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a538:	e0bffd17 	ldw	r2,-12(fp)
    a53c:	10c00217 	ldw	r3,8(r2)
    a540:	d0a0d417 	ldw	r2,-31920(gp)
    a544:	1880032e 	bgeu	r3,r2,a554 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a548:	e0bffd17 	ldw	r2,-12(fp)
    a54c:	00c00044 	movi	r3,1
    a550:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a554:	e0bffe17 	ldw	r2,-8(fp)
    a558:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a55c:	e0fffd17 	ldw	r3,-12(fp)
    a560:	d0a00904 	addi	r2,gp,-32732
    a564:	18bfcf1e 	bne	r3,r2,a4a4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a568:	0001883a 	nop
}
    a56c:	e037883a 	mov	sp,fp
    a570:	dfc00117 	ldw	ra,4(sp)
    a574:	df000017 	ldw	fp,0(sp)
    a578:	dec00204 	addi	sp,sp,8
    a57c:	f800283a 	ret

0000a580 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    a580:	deffff04 	addi	sp,sp,-4
    a584:	df000015 	stw	fp,0(sp)
    a588:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a58c:	000170fa 	wrctl	ienable,zero
}
    a590:	e037883a 	mov	sp,fp
    a594:	df000017 	ldw	fp,0(sp)
    a598:	dec00104 	addi	sp,sp,4
    a59c:	f800283a 	ret

0000a5a0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    a5a0:	defffb04 	addi	sp,sp,-20
    a5a4:	df000415 	stw	fp,16(sp)
    a5a8:	df000404 	addi	fp,sp,16
    a5ac:	e13ffe15 	stw	r4,-8(fp)
    a5b0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    a5b4:	e0bfff17 	ldw	r2,-4(fp)
    a5b8:	10820070 	cmpltui	r2,r2,2049
    a5bc:	1000021e 	bne	r2,zero,a5c8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    a5c0:	00820004 	movi	r2,2048
    a5c4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    a5c8:	e0fffe17 	ldw	r3,-8(fp)
    a5cc:	e0bfff17 	ldw	r2,-4(fp)
    a5d0:	1885883a 	add	r2,r3,r2
    a5d4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a5d8:	e0bffe17 	ldw	r2,-8(fp)
    a5dc:	e0bffc15 	stw	r2,-16(fp)
    a5e0:	00000506 	br	a5f8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    a5e4:	e0bffc17 	ldw	r2,-16(fp)
    a5e8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a5ec:	e0bffc17 	ldw	r2,-16(fp)
    a5f0:	10800804 	addi	r2,r2,32
    a5f4:	e0bffc15 	stw	r2,-16(fp)
    a5f8:	e0fffc17 	ldw	r3,-16(fp)
    a5fc:	e0bffd17 	ldw	r2,-12(fp)
    a600:	18bff836 	bltu	r3,r2,a5e4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    a604:	e0bffe17 	ldw	r2,-8(fp)
    a608:	108007cc 	andi	r2,r2,31
    a60c:	10000226 	beq	r2,zero,a618 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    a610:	e0bffc17 	ldw	r2,-16(fp)
    a614:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    a618:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    a61c:	e037883a 	mov	sp,fp
    a620:	df000017 	ldw	fp,0(sp)
    a624:	dec00104 	addi	sp,sp,4
    a628:	f800283a 	ret

0000a62c <exit>:
    a62c:	defffe04 	addi	sp,sp,-8
    a630:	000b883a 	mov	r5,zero
    a634:	dc000015 	stw	r16,0(sp)
    a638:	dfc00115 	stw	ra,4(sp)
    a63c:	2021883a 	mov	r16,r4
    a640:	000a6940 	call	a694 <__call_exitprocs>
    a644:	8009883a 	mov	r4,r16
    a648:	000a86c0 	call	a86c <_exit>

0000a64c <memcmp>:
    a64c:	30000d26 	beq	r6,zero,a684 <memcmp+0x38>
    a650:	20c00003 	ldbu	r3,0(r4)
    a654:	28800003 	ldbu	r2,0(r5)
    a658:	18800c1e 	bne	r3,r2,a68c <memcmp+0x40>
    a65c:	31bfff84 	addi	r6,r6,-2
    a660:	01ffffc4 	movi	r7,-1
    a664:	00000406 	br	a678 <memcmp+0x2c>
    a668:	20c00003 	ldbu	r3,0(r4)
    a66c:	28800003 	ldbu	r2,0(r5)
    a670:	31bfffc4 	addi	r6,r6,-1
    a674:	1880051e 	bne	r3,r2,a68c <memcmp+0x40>
    a678:	21000044 	addi	r4,r4,1
    a67c:	29400044 	addi	r5,r5,1
    a680:	31fff91e 	bne	r6,r7,a668 <memcmp+0x1c>
    a684:	0005883a 	mov	r2,zero
    a688:	f800283a 	ret
    a68c:	1885c83a 	sub	r2,r3,r2
    a690:	f800283a 	ret

0000a694 <__call_exitprocs>:
    a694:	00800074 	movhi	r2,1
    a698:	10aaff04 	addi	r2,r2,-21508
    a69c:	10800017 	ldw	r2,0(r2)
    a6a0:	defff204 	addi	sp,sp,-56
    a6a4:	df000c15 	stw	fp,48(sp)
    a6a8:	d8800015 	stw	r2,0(sp)
    a6ac:	10800c04 	addi	r2,r2,48
    a6b0:	dd400915 	stw	r21,36(sp)
    a6b4:	dfc00d15 	stw	ra,52(sp)
    a6b8:	ddc00b15 	stw	r23,44(sp)
    a6bc:	dd800a15 	stw	r22,40(sp)
    a6c0:	dd000815 	stw	r20,32(sp)
    a6c4:	dcc00715 	stw	r19,28(sp)
    a6c8:	dc800615 	stw	r18,24(sp)
    a6cc:	dc400515 	stw	r17,20(sp)
    a6d0:	dc000415 	stw	r16,16(sp)
    a6d4:	d9000115 	stw	r4,4(sp)
    a6d8:	2839883a 	mov	fp,r5
    a6dc:	d8800215 	stw	r2,8(sp)
    a6e0:	057fffc4 	movi	r21,-1
    a6e4:	d8800017 	ldw	r2,0(sp)
    a6e8:	dd800217 	ldw	r22,8(sp)
    a6ec:	15c00c17 	ldw	r23,48(r2)
    a6f0:	b8001b26 	beq	r23,zero,a760 <__call_exitprocs+0xcc>
    a6f4:	b9000117 	ldw	r4,4(r23)
    a6f8:	bd002217 	ldw	r20,136(r23)
    a6fc:	243fffc4 	addi	r16,r4,-1
    a700:	80001416 	blt	r16,zero,a754 <__call_exitprocs+0xc0>
    a704:	244007c4 	addi	r17,r4,31
    a708:	21000044 	addi	r4,r4,1
    a70c:	8c63883a 	add	r17,r17,r17
    a710:	8427883a 	add	r19,r16,r16
    a714:	2109883a 	add	r4,r4,r4
    a718:	8c63883a 	add	r17,r17,r17
    a71c:	9ce7883a 	add	r19,r19,r19
    a720:	2109883a 	add	r4,r4,r4
    a724:	a463883a 	add	r17,r20,r17
    a728:	a4e7883a 	add	r19,r20,r19
    a72c:	b925883a 	add	r18,r23,r4
    a730:	e0001726 	beq	fp,zero,a790 <__call_exitprocs+0xfc>
    a734:	a0000226 	beq	r20,zero,a740 <__call_exitprocs+0xac>
    a738:	89400017 	ldw	r5,0(r17)
    a73c:	2f001426 	beq	r5,fp,a790 <__call_exitprocs+0xfc>
    a740:	843fffc4 	addi	r16,r16,-1
    a744:	8c7fff04 	addi	r17,r17,-4
    a748:	9cffff04 	addi	r19,r19,-4
    a74c:	94bfff04 	addi	r18,r18,-4
    a750:	857ff71e 	bne	r16,r21,a730 <__call_exitprocs+0x9c>
    a754:	00800034 	movhi	r2,0
    a758:	10800004 	addi	r2,r2,0
    a75c:	1000311e 	bne	r2,zero,a824 <__call_exitprocs+0x190>
    a760:	dfc00d17 	ldw	ra,52(sp)
    a764:	df000c17 	ldw	fp,48(sp)
    a768:	ddc00b17 	ldw	r23,44(sp)
    a76c:	dd800a17 	ldw	r22,40(sp)
    a770:	dd400917 	ldw	r21,36(sp)
    a774:	dd000817 	ldw	r20,32(sp)
    a778:	dcc00717 	ldw	r19,28(sp)
    a77c:	dc800617 	ldw	r18,24(sp)
    a780:	dc400517 	ldw	r17,20(sp)
    a784:	dc000417 	ldw	r16,16(sp)
    a788:	dec00e04 	addi	sp,sp,56
    a78c:	f800283a 	ret
    a790:	b9000117 	ldw	r4,4(r23)
    a794:	92000017 	ldw	r8,0(r18)
    a798:	213fffc4 	addi	r4,r4,-1
    a79c:	24001a26 	beq	r4,r16,a808 <__call_exitprocs+0x174>
    a7a0:	90000015 	stw	zero,0(r18)
    a7a4:	403fe626 	beq	r8,zero,a740 <__call_exitprocs+0xac>
    a7a8:	ba400117 	ldw	r9,4(r23)
    a7ac:	a0001226 	beq	r20,zero,a7f8 <__call_exitprocs+0x164>
    a7b0:	00800044 	movi	r2,1
    a7b4:	1408983a 	sll	r4,r2,r16
    a7b8:	a1404017 	ldw	r5,256(r20)
    a7bc:	214a703a 	and	r5,r4,r5
    a7c0:	28000d26 	beq	r5,zero,a7f8 <__call_exitprocs+0x164>
    a7c4:	a1404117 	ldw	r5,260(r20)
    a7c8:	2148703a 	and	r4,r4,r5
    a7cc:	2000101e 	bne	r4,zero,a810 <__call_exitprocs+0x17c>
    a7d0:	99400017 	ldw	r5,0(r19)
    a7d4:	d9000117 	ldw	r4,4(sp)
    a7d8:	da400315 	stw	r9,12(sp)
    a7dc:	403ee83a 	callr	r8
    a7e0:	da400317 	ldw	r9,12(sp)
    a7e4:	b9000117 	ldw	r4,4(r23)
    a7e8:	227fbe1e 	bne	r4,r9,a6e4 <__call_exitprocs+0x50>
    a7ec:	b1000017 	ldw	r4,0(r22)
    a7f0:	25ffd326 	beq	r4,r23,a740 <__call_exitprocs+0xac>
    a7f4:	003fbb06 	br	a6e4 <__call_exitprocs+0x50>
    a7f8:	da400315 	stw	r9,12(sp)
    a7fc:	403ee83a 	callr	r8
    a800:	da400317 	ldw	r9,12(sp)
    a804:	003ff706 	br	a7e4 <__call_exitprocs+0x150>
    a808:	bc000115 	stw	r16,4(r23)
    a80c:	003fe506 	br	a7a4 <__call_exitprocs+0x110>
    a810:	99000017 	ldw	r4,0(r19)
    a814:	da400315 	stw	r9,12(sp)
    a818:	403ee83a 	callr	r8
    a81c:	da400317 	ldw	r9,12(sp)
    a820:	003ff006 	br	a7e4 <__call_exitprocs+0x150>
    a824:	b9000117 	ldw	r4,4(r23)
    a828:	20000e1e 	bne	r4,zero,a864 <__call_exitprocs+0x1d0>
    a82c:	b9000017 	ldw	r4,0(r23)
    a830:	20000826 	beq	r4,zero,a854 <__call_exitprocs+0x1c0>
    a834:	b1000015 	stw	r4,0(r22)
    a838:	a0000226 	beq	r20,zero,a844 <__call_exitprocs+0x1b0>
    a83c:	a009883a 	mov	r4,r20
    a840:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a844:	b809883a 	mov	r4,r23
    a848:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a84c:	b5c00017 	ldw	r23,0(r22)
    a850:	003fa706 	br	a6f0 <__call_exitprocs+0x5c>
    a854:	0007883a 	mov	r3,zero
    a858:	b82d883a 	mov	r22,r23
    a85c:	182f883a 	mov	r23,r3
    a860:	003fa306 	br	a6f0 <__call_exitprocs+0x5c>
    a864:	b8c00017 	ldw	r3,0(r23)
    a868:	003ffb06 	br	a858 <__call_exitprocs+0x1c4>

0000a86c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    a86c:	defffc04 	addi	sp,sp,-16
    a870:	df000315 	stw	fp,12(sp)
    a874:	df000304 	addi	fp,sp,12
    a878:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    a87c:	0001883a 	nop
    a880:	e0bfff17 	ldw	r2,-4(fp)
    a884:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    a888:	e0bffd17 	ldw	r2,-12(fp)
    a88c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    a890:	e0bffe17 	ldw	r2,-8(fp)
    a894:	10000226 	beq	r2,zero,a8a0 <_exit+0x34>
    ALT_SIM_FAIL();
    a898:	002af070 	cmpltui	zero,zero,43969
    a89c:	00000106 	br	a8a4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    a8a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    a8a4:	003fff06 	br	a8a4 <_exit+0x38>
